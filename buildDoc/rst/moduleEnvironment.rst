.. _moduleEnvironment:

music21.environment
===================

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.environment



Environment
-----------

.. class:: Environment(modName=None)

    The Environment object stores user preferences as dictionary-like object. 

    Create an instance of this object. A modName argument can be provided for use in printDebug() calls. 

    >>> a = Environment()
    >>> post = a['writeFormat']

    

    **Environment** **attributes**

        .. attribute:: modNameParent

        A string representation of the module that contains this Environment instance. 

        .. attribute:: ref

        The Python dictionary used to store all internal settings. 

    **Environment** **methods**

        .. method:: read(fp=None)

        Load from an XML preference file if and only if available and has been written in the past. This means that no preference file will ever be written unless manually done so. 

        .. method:: write(fp=None)

        Write an XML file. This must be manually called to store preferences. If fp is None, the default storage location will be used. 

        .. method:: getSettingsPath()

        Return the path to the platform specific settings file. 

        .. method:: getTempDir()

        Get a temporary directory. Return the user preference if set. 

        .. method:: getTempFile(suffix=)

        Return a file path to a temporary file with the specified suffix 

        .. method:: keys()

        No documentation. 

        .. method:: launch(fmt, fp, options=)

        Open a file with an either default or user-specified applications. 

        .. method:: loadDefaults()

        Load defaults. All keys are derived from these defaults. 

        .. method:: printDebug(msg, statusLevel=1)

        Format one or more data elements into string, and print to stderr. The first arg can be a list of string; lists are concatenated with common.formatStr(). 

        .. method:: warn(msg)

        To print a warning to the user, send a list of strings to this method. 


Preference
----------

.. class:: Preference()

    

    

    

    >>> a = Preference()

    inherits from: :class:`~music21.node.Node`

    **Preference** **attributes**

        Attributes inherited from :class:`~music21.node.Node`: :attr:`~music21.node.Node.charData`

    **Preference** **properties**

        Properties inherited from :class:`~music21.node.Node`: :attr:`~music21.node.Node.tag`

    **Preference** **methods**

        Methods inherited from :class:`~music21.node.Node`: :meth:`~music21.node.Node.get`, :meth:`~music21.node.Node.getNewDoc`, :meth:`~music21.node.Node.loadAttrs`, :meth:`~music21.node.Node.merge`, :meth:`~music21.node.Node.set`, :meth:`~music21.node.Node.setDefaults`, :meth:`~music21.node.Node.toxml`, :meth:`~music21.node.Node.xmlStr`


Settings
--------

.. class:: Settings()

    

    

    

    >>> a = Settings()

    inherits from: :class:`~music21.node.NodeList`, :class:`~music21.node.Node`

    **Settings** **attributes**

        Attributes inherited from :class:`~music21.node.NodeList`: :attr:`~music21.node.NodeList.componentList`

        Attributes inherited from :class:`~music21.node.Node`: :attr:`~music21.node.Node.charData`

    **Settings** **properties**

        Properties inherited from :class:`~music21.node.Node`: :attr:`~music21.node.Node.tag`

    **Settings** **methods**

        Methods inherited from :class:`~music21.node.NodeList`: :meth:`~music21.node.NodeList.append`

        Methods inherited from :class:`~music21.node.Node`: :meth:`~music21.node.Node.get`, :meth:`~music21.node.Node.getNewDoc`, :meth:`~music21.node.Node.loadAttrs`, :meth:`~music21.node.Node.merge`, :meth:`~music21.node.Node.set`, :meth:`~music21.node.Node.setDefaults`, :meth:`~music21.node.Node.toxml`, :meth:`~music21.node.Node.xmlStr`


