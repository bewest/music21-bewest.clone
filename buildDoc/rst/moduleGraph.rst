.. _moduleGraph:

music21.graph
=============

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.graph



.. function:: plotStream(streamObj)

Given a stream and any keyword configuration arguments, create and display a plot. Note: plots requires matplotib to be installed. Plot method can be specified as a second argument or by keyword. Available plots include the following: pitchSpace (:class:`~music21.graph.PlotPitchSpace`) pitchClass (:class:`~music21.graph.PlotPitchClass`) quarterLength (:class:`~music21.graph.PlotQuarterLength`) scatterPitchSpaceQuarterLength (:class:`~music21.graph.PlotScatterPitchSpaceQuarterLength`) scatterPitchClassQuarterLength (:class:`~music21.graph.PlotScatterPitchClassQuarterLength`) scatterPitchClassOffset (':class:`~graph.PlotScatterPitchClassOffset`) pitchClassOffset (:class:`~music21.graph.PlotPitchSpaceOffset`) pitchSpaceOffset (:class:`~music21.graph.PlotPitchClassOffset`) pitchSpaceQuarterLengthCount (:class:`~music21.graph.PlotPitchSpaceQuarterLengthCount`) pitchClassQuarterLengthCount (:class:`~music21.graph.PlotPitchClassQuarterLengthCount`) 3DPitchSpaceQuarterLengthCount (:class:`~music21.graph.Plot3DPitchSpaceQuarterLengthCount`) 



PlotPitchSpace
--------------

.. class:: PlotPitchSpace

    A histogram of pitch space. 

    .. image:: images/PlotPitchSpace.* 
        :width: 500 

    

    inherits from: :class:`~music21.graph._PlotHistogram`, :class:`~music21.graph.PlotStream`

    **PlotPitchSpace** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotPitchSpace** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotPitchClass
--------------

.. class:: PlotPitchClass

    A histogram of pitch class 

    .. image:: images/PlotPitchClass.* 
        :width: 500 

    

    inherits from: :class:`~music21.graph._PlotHistogram`, :class:`~music21.graph.PlotStream`

    **PlotPitchClass** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotPitchClass** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotQuarterLength
-----------------

.. class:: PlotQuarterLength

    A histogram of pitch class 

    .. image:: images/PlotQuarterLength.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotHistogram`, :class:`~music21.graph.PlotStream`

    **PlotQuarterLength** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotQuarterLength** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchSpaceQuarterLength
----------------------------------

.. class:: PlotScatterPitchSpaceQuarterLength

    A scatter plot of pitch space and quarter length 

    .. image:: images/PlotScatterPitchSpaceQuarterLength.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchSpaceQuarterLength** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotScatterPitchSpaceQuarterLength** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchClassQuarterLength
----------------------------------

.. class:: PlotScatterPitchClassQuarterLength

    A scatter plot of pitch class and quarter length 

    .. image:: images/PlotScatterPitchClassQuarterLength.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchClassQuarterLength** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotScatterPitchClassQuarterLength** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchClassOffset
---------------------------

.. class:: PlotScatterPitchClassOffset

    A scatter plot of pitch class and offset 

    .. image:: images/PlotScatterPitchClassOffset.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchClassOffset** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotScatterPitchClassOffset** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotPitchSpaceOffset
--------------------

.. class:: PlotPitchSpaceOffset

    A graph of events, sorted by pitch space, over time 

    .. image:: images/PlotPitchSpaceOffset.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotBrokenHorizontalBar`, :class:`~music21.graph.PlotStream`

    **PlotPitchSpaceOffset** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotPitchSpaceOffset** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotPitchClassOffset
--------------------

.. class:: PlotPitchClassOffset

    A graph of events, sorted by pitch class, over time 

    .. image:: images/PlotPitchClassOffset.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotBrokenHorizontalBar`, :class:`~music21.graph.PlotStream`

    **PlotPitchClassOffset** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotPitchClassOffset** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotPitchSpaceQuarterLengthCount
--------------------------------

.. class:: PlotPitchSpaceQuarterLengthCount

    A graph of event, sorted by pitch, over time 

    .. image:: images/PlotPitchSpaceQuarterLengthCount.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotScatterWeighted`, :class:`~music21.graph.PlotStream`

    **PlotPitchSpaceQuarterLengthCount** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotPitchSpaceQuarterLengthCount** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotPitchClassQuarterLengthCount
--------------------------------

.. class:: PlotPitchClassQuarterLengthCount

    A graph of event, sorted by pitch class, over time. 

    .. image:: images/PlotPitchClassQuarterLengthCount.* 
        :width: 500 

    inherits from: :class:`~music21.graph._PlotScatterWeighted`, :class:`~music21.graph.PlotStream`

    **PlotPitchClassQuarterLengthCount** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotPitchClassQuarterLengthCount** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


Plot3DPitchSpaceQuarterLengthCount
----------------------------------

.. class:: Plot3DPitchSpaceQuarterLengthCount

    A scatter plot of pitch space and quarter length 

    .. image:: images/Plot3DPitchSpaceQuarterLengthCount.* 
        :width: 500 

    inherits from: :class:`~music21.graph._Plot3DBars`, :class:`~music21.graph.PlotStream`

    **Plot3DPitchSpaceQuarterLengthCount** **attributes**

    .. attribute:: id

    No documentation. 

    **Plot3DPitchSpaceQuarterLengthCount** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.convertPsToNoteName`, :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


Graph
-----

.. class:: Graph

    An object representing a graph or plot, automating the creation and configuration of this graph in matplotlib. Numerous keyword arguments can be provided for configuration: alpha,  colorBackgroundData, colorBackgroundFigure, colorGrid, title, doneAction, figureSize, colors, tickFontSize, titleFontSize, labelFontSize, fontFamily. The doneAction determines what happens after graph processing: either write a file ('write'), open an interactive GUI browser ('show') or None (do processing but do not write output. 

    

    **Graph** **attributes**

    .. attribute:: fontFamily

    No documentation. 

    .. attribute:: doneAction

    No documentation. 

    .. attribute:: title

    No documentation. 

    .. attribute:: colorBackgroundFigure

    No documentation. 

    .. attribute:: colors

    No documentation. 

    .. attribute:: tickFontSize

    No documentation. 

    .. attribute:: colorGrid

    No documentation. 

    .. attribute:: figureSize

    No documentation. 

    .. attribute:: colorBackgroundData

    No documentation. 

    .. attribute:: axisKeys

    No documentation. 

    .. attribute:: grid

    No documentation. 

    .. attribute:: titleFontSize

    No documentation. 

    .. attribute:: alpha

    No documentation. 

    .. attribute:: labelFontSize

    No documentation. 

    .. attribute:: data

    No documentation. 

    .. attribute:: axis

    dict() -> new empty dictionary. dict(mapping) -> new dictionary initialized from a mapping object's (key, value) pairs. dict(seq) -> new dictionary initialized as if via: d = {} for k, v in seq: d[k] = v dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2) 

    **Graph** **methods**

    .. method:: __init__()

    Setup a basic graph with a dictionary for two or more axis values. Set options for grid and other parameters. Optional keyword arguments: title, doneAction 

    >>> a = Graph()
    >>> a = Graph(title='green')

    .. method:: done(fp=None)

    Implement the desired doneAction, after data processing 

    .. method:: process()

    process data and prepare plt 

    .. method:: setAxisLabel(axisKey, label)

    No documentation. 

    .. method:: setAxisRange(axisKey, valueRange, pad=False)

    No documentation. 

    .. method:: setData(data)

    No documentation. 

    .. method:: setDoneAction(action)

    No documentation. 

    .. method:: setFigureSize(figSize)

    No documentation. 

    .. method:: setTicks(axisKey, pairs)

    paris are positions and labels 

    .. method:: setTitle(title)

    No documentation. 

    .. method:: show()

    No documentation. 

    .. method:: write(fp=None)

    No documentation. 


Graph2DBrokenHorizontalBar
--------------------------

.. class:: Graph2DBrokenHorizontalBar


    inherits from: :class:`~music21.graph.Graph`

    **Graph2DBrokenHorizontalBar** **attributes**

    Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph2DBrokenHorizontalBar** **methods**

    .. method:: __init__()

    Numerous horizontal bars in discrete channels, where bars can be incomplete and/or overlap. Data provided is a list of pairs, where the first value becomes the key, the second value is a list of x-start, x-end points. 

    >>> a = Graph2DBrokenHorizontalBar(doneAction=None)
    >>> data = [('a', [(10,20), (15, 40)]), ('b', [(5,15), (20,40)])]
    >>> a.setData(data)
    >>> a.process()

    .. method:: process()

    No documentation. 

    Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


Graph2DHistogram
----------------

.. class:: Graph2DHistogram


    inherits from: :class:`~music21.graph.Graph`

    **Graph2DHistogram** **attributes**

    Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph2DHistogram** **methods**

    .. method:: __init__()

    Graph the count of a single element. Data set is simply a list of x and y pairs, where there is only one of each x value, and y value is the count or magnitude of that value 

    >>> a = Graph2DHistogram(doneAction=None)
    >>> data = [(x, random.choice(range(30))) for x in range(50)]
    >>> a.setData(data)
    >>> a.process()

    

    .. method:: process()

    No documentation. 

    Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


Graph2DScatter
--------------

.. class:: Graph2DScatter


    inherits from: :class:`~music21.graph.Graph`

    **Graph2DScatter** **attributes**

    Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph2DScatter** **methods**

    .. method:: __init__()

    Graph two parameters in a scatter plot 

    >>> a = Graph2DScatter(doneAction=None)
    >>> data = [(x, x*x) for x in range(50)]
    >>> a.setData(data)
    >>> a.process()

    .. method:: process()

    xValueLegit determines if index values or real values are used 

    Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


Graph2DScatterWeighted
----------------------

.. class:: Graph2DScatterWeighted

    A scatter plot where points are scaled in size to represent the number of values stored within. 

    inherits from: :class:`~music21.graph.Graph`

    **Graph2DScatterWeighted** **attributes**

    Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph2DScatterWeighted** **methods**

    .. method:: __init__()

    A scatter plot where points are scaled in size to represent the number of values stored within. 

    >>> a = Graph2DScatterWeighted(doneAction=None)
    >>> data = [(23, 15, 234), (10, 23, 12), (4, 23, 5)]
    >>> a.setData(data)
    >>> a.process()

    .. method:: process()

    No documentation. 

    Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


Graph3DBars
-----------

.. class:: Graph3DBars


    inherits from: :class:`~music21.graph.Graph`

    **Graph3DBars** **attributes**

    Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph3DBars** **methods**

    .. method:: __init__()

    Graph multiple parallel bar graphs in 3D. Note: there is bug in matplotlib .99.0 that causes the units to be unusual here. this is supposed to fixed with a new release Data definition: A dictionary where each key forms an array sequence along the z plane (which is depth) For each dictionary, a list of value pairs, where each pair is the (x, y) coordinates. 

    >>> a = Graph3DBars()

    .. method:: process()

    No documentation. 

    Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


Graph3DPolygonBars
------------------

.. class:: Graph3DPolygonBars


    inherits from: :class:`~music21.graph.Graph`

    **Graph3DPolygonBars** **attributes**

    .. attribute:: barWidth

    No documentation. 

    Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph3DPolygonBars** **methods**

    .. method:: __init__()

    Graph multiple parallel bar graphs in 3D. This draws bars with polygons, a temporary alternative to using Graph3DBars, above. Note: Axis ticks do not seem to be adjustable without distorting the graph. 

    >>> a = Graph3DPolygonBars(doneAction=None)
    >>> data = {1:[], 2:[], 3:[]}
    >>> for i in range(len(data.keys())):
    ...    q = [(x, random.choice(range(10*(i+1)))) for x in range(20)] 
    ...    data[data.keys()[i]] = q 
    >>> a.setData(data)
    >>> a.process()

    .. method:: process()

    No documentation. 

    Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


PlotStream
----------

.. class:: PlotStream

    Approaches to plotting and graphing a stream. A base class from which Stream plotting Classes inherit. 

    

    **PlotStream** **attributes**

    .. attribute:: id

    No documentation. 

    **PlotStream** **methods**

    .. method:: __init__(streamObj)

    No documentation. 

    .. method:: convertPsToNoteName(ps)

    No documentation. 

    .. method:: process()

    This will process all data, as well as call the done() method. What happens when the done() is called is determined by the the keyword argument `doneAction`; options are 'show' (display immediately), 'write' (write the file to a supplied file path), and None (do processing but do not write or show a graph). 

    .. method:: show()

    Call internal Graphs show() method independently of doneAction set and run with process() 

    .. method:: ticksDynamics()

    Utility method to get ticks in dynamic values. 

    >>> from music21 import stream; s = stream.Stream()
    >>> a = PlotStream(s)
    >>> a.ticksDynamics()
    [[0, 'pppppp'], [1, 'ppppp'], [2, 'pppp'], [3, 'ppp'], [4, 'pp'], [5, 'p'], [6, 'mp'], [7, 'mf'], [8, 'f'], [9, 'fp'], [10, 'sf'], [11, 'ff'], [12, 'fff'], [13, 'ffff'], [14, 'fffff'], [15, 'ffffff']] 

    .. method:: ticksPitchClass(pcMin=0, pcMax=11)

    Utility method to get ticks in pitch classes 

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotStream(s)
    >>> a.ticksPitchClass()
    [[0, 'C'], [1, 'C#'], [2, 'D'], [3, 'D#'], [4, 'E'], [5, 'F'], [6, 'F#'], [7, 'G'], [8, 'G#'], [9, 'A'], [10, 'A#'], [11, 'B']] 

    .. method:: ticksPitchClassUsage(pcMin=0, pcMax=11, showEnharmonic=False, skipUnused=True)

    Get ticks and labels for pitch classes based on usage. That is, show the most commonly used enharmonic first. 

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotStream(s)
    >>> a.ticksPitchClassUsage()
    [[0, u'C'], [2, u'D'], [3, u'D#'], [4, u'E'], [6, u'F#'], [7, u'G'], [9, u'A'], [11, u'B']] 
    >>> s = corpus.parseWork('bach/bwv281.xml')
    >>> a = PlotStream(s)
    >>> a.ticksPitchClassUsage(showEnharmonic=True)
    [[0, u'C'], [2, u'D'], [3, u'E-'], [4, u'E'], [5, u'F'], [7, u'G'], [9, u'A'], [10, u'B-'], [11, u'B']] 
    >>> a.ticksPitchClassUsage(showEnharmonic=True, skipUnused=False)
    [[0, u'C'], [1, 'C#'], [2, u'D'], [3, u'E-'], [4, u'E'], [5, u'F'], [6, 'F#'], [7, u'G'], [8, 'G#'], [9, u'A'], [10, u'B-'], [11, u'B']] 
    >>> s = corpus.parseWork('schumann/opus41no1/movement2.xml')
    >>> a = PlotStream(s)
    >>> a.ticksPitchClassUsage(showEnharmonic=True)
    [[0, u'C'], [1, u'D-/C#'], [2, u'D'], [3, u'E-/D#'], [4, u'E'], [5, u'F'], [6, u'F#'], [7, u'G'], [8, u'A-/G#'], [9, u'A'], [10, u'B-'], [11, u'B']] 

    .. method:: ticksPitchSpaceChromatic(pitchMin=36, pitchMax=100)

    Utility method to get ticks in pitch space values. 

    >>> from music21 import stream; s = stream.Stream()
    >>> a = PlotStream(s)
    >>> a.ticksPitchSpaceChromatic(60,72)
    [[60, 'C4'], [61, 'C#4'], [62, 'D4'], [63, 'D#4'], [64, 'E4'], [65, 'F4'], [66, 'F#4'], [67, 'G4'], [68, 'G#4'], [69, 'A4'], [70, 'A#4'], [71, 'B4'], [72, 'C5']] 

    .. method:: ticksPitchSpaceOctave(pitchMin=36, pitchMax=100)

    Utility method to get ticks in pitch space only for every octave. 

    >>> from music21 import stream; s = stream.Stream()
    >>> a = PlotStream(s)
    >>> a.ticksPitchSpaceOctave()
    [[36, 'C2'], [48, 'C3'], [60, 'C4'], [72, 'C5'], [84, 'C6'], [96, 'C7']] 

    .. method:: ticksPitchSpaceUsage(pcMin=36, pcMax=72, showEnharmonic=False, skipUnused=True)

    Get ticks and labels for pitch space based on usage. That is, show the most commonly used enharmonic first. 

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotStream(s[0])
    >>> a.ticksPitchSpaceUsage()
    [[64, u'E4'], [66, u'F#4'], [67, u'G4'], [69, u'A4'], [71, u'B4'], [72, u'C5']] 
    >>> s = corpus.parseWork('schumann/opus41no1/movement2.xml')
    >>> a = PlotStream(s)
    >>> a.ticksPitchSpaceUsage(showEnharmonic=True)
    [[36, u'C2'], [38, u'D2'], [40, u'E2'], [41, u'F2'], [43, u'G2'], [44, u'A-2'], [45, u'A2'], [47, u'B2'], [48, u'C3'], [50, u'D3'], [51, u'E-3/D#3'], [52, u'E3'], [53, u'F3'], [54, u'F#3'], [55, u'G3'], [56, u'A-3/G#3'], [57, u'A3'], [58, u'B-3'], [59, u'B3'], [60, u'C4'], [61, u'D-4/C#4'], [62, u'D4'], [63, u'E-4/D#4'], [64, u'E4'], [65, u'F4'], [66, u'F#4'], [67, u'G4'], [68, u'A-4/G#4'], [69, u'A4'], [70, u'B-4'], [71, u'B4'], [72, u'C5']] 

    

    .. method:: ticksQuarterLength(qlList=None, labelStyle=type)

    

    

    >>> from music21 import stream; s = stream.Stream()
    >>> a = PlotStream(s)
    >>> a.ticksQuarterLength()
    [[0.25, '16th'], [0.5, 'eighth'], [1, 'quarter'], [2, 'half'], [4, 'whole']] 

    

    .. method:: write(fp=None)

    Call internal Graphs write() method independently of doneAction set and run with process() 


