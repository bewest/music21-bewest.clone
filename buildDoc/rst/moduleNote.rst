.. _moduleNote:

music21.note
============

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.note



Classes and functions for creating and manipulating notes, ties, and durations.
Pitch-specific functions are in music21.pitch, but obviously are of great importance here too.

.. function:: noteFromDiatonicNumber()


.. function:: sendNoteInfo()

Debugging method to print information about a music21 note called by trecento.trecentoCadence, among other places 

Class Note
----------

.. class:: Note

    Note class for notes (not rests or unpitched elements) that can be represented by one or more notational units A Note knows both its total duration and how to express itself as a set of tied notes of different lengths. For instance, a note of 2.5 quarters in length could be half tied to eighth or dotted quarter tied to quarter. A ComplexNote will eventually be smart enough that if given a duration in quarters it will try to figure out a way to express itself as best it can if it needs to be represented on page.  It does not know this now. 

    Class inherits from: :class:`music21.note.NotRest`, :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    .. attribute:: isNote

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: isRest

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: isUnpitched

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: beams

    A group of beams applied to a single note that represents the partial beam structure of many notes beamed together. 

    .. attribute:: pitch

    No documentation. 

    Attributes inherited from :class:`music21.note.NotRest`: ``stemDirection``

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    .. attribute:: accidental

    No documentation. 

    .. attribute:: diatonicNoteNum

    see Pitch.diatonicNoteNum 

    .. attribute:: freq440

    No documentation. 

    .. attribute:: frequency

    No documentation. 

    .. attribute:: lily

    The name of the note as it would appear in Lilypond format. 

    .. attribute:: midi

    Returns the note's midi number. C4 (middle C) = 60, C#4 = 61, D-4 = 61, D4 = 62; A4 = 69 

    >>> a = Note()
    >>> a.pitch = Pitch('d-4')
    >>> a.midi
    61 

    .. attribute:: mx

    Returns a List of mxNotes Attributes of notes are merged from different locations: first from the duration objects, then from the pitch objects. Finally, GeneralNote attributes are added 

    .. attribute:: name

    No documentation. 

    .. attribute:: nameWithOctave

    No documentation. 

    .. attribute:: octave

    No documentation. 

    .. attribute:: pitchClass

    Return pitch class 

    >>> d = Note()
    >>> d.pitch = Pitch('d-4')
    >>> d.pitchClass
    1 
    >>>

    .. attribute:: ps

    Returns the note's midi number. C4 (middle C) = 60, C#4 = 61, D-4 = 61, D4 = 62; A4 = 69 

    >>> a = Note()
    >>> a.ps = 60.5
    >>> a.midi
    61 
    >>> a.ps
    60.5 

    .. attribute:: step

    No documentation. 

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    .. method:: setAccidental()

    No documentation. 

    Methods inherited from :class:`music21.note.NotRest`: ``splitNoteAtPoint()``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class Rest
----------

.. class:: Rest

    General rest class 

    Class inherits from: :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    .. attribute:: isNote

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: isRest

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: isUnpitched

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: name

    str(object) -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. 

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    .. attribute:: lily

    The name of the rest as it would appear in Lilypond format. 

    >>> r1 = Rest()
    >>> r1.duration.type = "half"
    >>> r1.lily
    'r2' 

    .. attribute:: mx

    Returns a List of mxNotes Attributes of notes are merged from different locations: first from the duration objects, then from the pitch objects. Finally, GeneralNote attributes are added 

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class WholeNote
---------------

.. class:: WholeNote


    Class inherits from: :class:`music21.note.Note`, :class:`music21.note.NotRest`, :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    Attributes inherited from :class:`music21.note.Note`: ``isNote``, ``isRest``, ``isUnpitched``, ``beams``, ``pitch``

    Attributes inherited from :class:`music21.note.NotRest`: ``stemDirection``

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.note.Note`: ``accidental``, ``diatonicNoteNum``, ``freq440``, ``frequency``, ``lily``, ``midi``, ``mx``, ``name``, ``nameWithOctave``, ``octave``, ``pitchClass``, ``ps``, ``step``

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.note.Note`: ``setAccidental()``

    Methods inherited from :class:`music21.note.NotRest`: ``splitNoteAtPoint()``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class Unpitched
---------------

.. class:: Unpitched

    General class of unpitched objects which appear at different places on the staff.  Examples: percussion notation 

    Class inherits from: :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    .. attribute:: displayOctave

    int(x[, base]) -> integer Convert a string or number to an integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string.  If base is zero, the proper base is guessed based on the string content.  If the argument is outside the integer range a long object will be returned instead. 

    .. attribute:: displayStep

    str(object) -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. 

    .. attribute:: isNote

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: isRest

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: isUnpitched

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class EighthNote
----------------

.. class:: EighthNote


    Class inherits from: :class:`music21.note.Note`, :class:`music21.note.NotRest`, :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    Attributes inherited from :class:`music21.note.Note`: ``isNote``, ``isRest``, ``isUnpitched``, ``beams``, ``pitch``

    Attributes inherited from :class:`music21.note.NotRest`: ``stemDirection``

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.note.Note`: ``accidental``, ``diatonicNoteNum``, ``freq440``, ``frequency``, ``lily``, ``midi``, ``mx``, ``name``, ``nameWithOctave``, ``octave``, ``pitchClass``, ``ps``, ``step``

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.note.Note`: ``setAccidental()``

    Methods inherited from :class:`music21.note.NotRest`: ``splitNoteAtPoint()``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class QuarterNote
-----------------

.. class:: QuarterNote


    Class inherits from: :class:`music21.note.Note`, :class:`music21.note.NotRest`, :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    Attributes inherited from :class:`music21.note.Note`: ``isNote``, ``isRest``, ``isUnpitched``, ``beams``, ``pitch``

    Attributes inherited from :class:`music21.note.NotRest`: ``stemDirection``

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.note.Note`: ``accidental``, ``diatonicNoteNum``, ``freq440``, ``frequency``, ``lily``, ``midi``, ``mx``, ``name``, ``nameWithOctave``, ``octave``, ``pitchClass``, ``ps``, ``step``

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.note.Note`: ``setAccidental()``

    Methods inherited from :class:`music21.note.NotRest`: ``splitNoteAtPoint()``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class Beam
----------

.. class:: Beam

    An object representation of a beam, where each beam objects exists for each horizontal line in a total beam structure for one note. 

    

    .. attribute:: direction

    No documentation. 

    .. attribute:: type

    No documentation. 

    .. attribute:: number

    No documentation. 

    .. attribute:: independentAngle

    No documentation. 

    .. attribute:: mx

    Returns a Beams object 

    >>> a = Beam()
    >>> a.type = 'start'
    >>> a.number = 1
    >>> b = a.mx
    >>> b.get('charData')
    'begin' 
    >>> b.get('number')
    1 
    >>> a.type = 'partial'
    >>> a.direction = 'left'
    >>> b = a.mx
    >>> b.get('charData')
    'backward hook' 


Class HalfNote
--------------

.. class:: HalfNote


    Class inherits from: :class:`music21.note.Note`, :class:`music21.note.NotRest`, :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    Attributes inherited from :class:`music21.note.Note`: ``isNote``, ``isRest``, ``isUnpitched``, ``beams``, ``pitch``

    Attributes inherited from :class:`music21.note.NotRest`: ``stemDirection``

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.note.Note`: ``accidental``, ``diatonicNoteNum``, ``freq440``, ``frequency``, ``lily``, ``midi``, ``mx``, ``name``, ``nameWithOctave``, ``octave``, ``pitchClass``, ``ps``, ``step``

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.note.Note`: ``setAccidental()``

    Methods inherited from :class:`music21.note.NotRest`: ``splitNoteAtPoint()``

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class Lyric
-----------

.. class:: Lyric


    

    .. attribute:: text

    No documentation. 

    .. attribute:: number

    int(x[, base]) -> integer Convert a string or number to an integer, if possible.  A floating point argument will be truncated towards zero (this does not include a string representation of a floating point number!)  When converting a string, use the optional base.  It is an error to supply a base when converting a non-string.  If base is zero, the proper base is guessed based on the string content.  If the argument is outside the integer range a long object will be returned instead. 

    .. attribute:: syllabic

    No documentation. 

    .. attribute:: mx

    Returns an mxLyric 

    >>> a = Lyric()
    >>> a.text = 'hello'
    >>> mxLyric = a.mx
    >>> mxLyric.get('text')
    'hello' 


Class Beams
-----------

.. class:: Beams

    A group of beams applied to a single note that represents the partial beam structure of many notes beamed together. 

    

    .. attribute:: feathered

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: beamsList

    list() -> new list list(sequence) -> new list initialized from sequence's items 

    .. attribute:: mx

    Returns a list of mxBeam objects 

    .. method:: append()

    No documentation. 

    .. method:: fill()

    Clear an fill the beams list as commonly needed for various durations do not set type or direction 

    >>> a = Beams()
    >>> a.fill('16th')
    >>> len(a)
    2 
    >>> a.fill('32nd')
    >>> len(a)
    3 

    .. method:: getByNumber()

    Set an internal beam object by number, or rhythmic symbol level 

    >>> a = Beams()
    >>> a.fill('16th')
    >>> a.setAll('start')
    >>> a.getByNumber(2).type
    'start' 

    .. method:: getNumbers()

    Retrun a lost of all defind numbers 

    >>> a = Beams()
    >>> a.fill('32nd')
    >>> a.getNumbers()
    [1, 2, 3] 

    .. method:: getTypeByNumber()

    Get beam type, with direction, by number 

    >>> a = Beams()
    >>> a.fill('16th')
    >>> a.setAll('start')
    >>> a.setByNumber(2, 'partial-right')
    >>> a.getTypeByNumber(2)
    'partial-right' 
    >>> a.getTypeByNumber(1)
    'start' 

    .. method:: getTypes()

    Retur a lost of all types 

    >>> a = Beams()
    >>> a.fill('16th')
    >>> a.setAll('start')
    >>> a.getTypes()
    ['start', 'start'] 

    .. method:: setAll()

    Convenience method to set all beam objects within Beams 

    >>> a = Beams()
    >>> a.fill('16th')
    >>> a.setAll('start')
    >>> a.getTypes()
    ['start', 'start'] 

    

    .. method:: setByNumber()

    Set an internal beam object by number, or rhythmic symbol level 

    >>> a = Beams()
    >>> a.fill('16th')
    >>> a.setAll('start')
    >>> a.setByNumber(1, 'continue')
    >>> a.beamsList[0].type
    'continue' 
    >>> a.setByNumber(2, 'stop')
    >>> a.beamsList[1].type
    'stop' 
    >>> a.setByNumber(2, 'partial-right')
    >>> a.beamsList[1].type
    'partial' 
    >>> a.beamsList[1].direction
    'right' 


Class NotRest
-------------

.. class:: NotRest

    Parent class for objects that are not rests; or, object that can be tied. 

    Class inherits from: :class:`music21.note.GeneralNote`, :class:`music21.base.Music21Object`

    .. attribute:: stemDirection

    str(object) -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. 

    Attributes inherited from :class:`music21.note.GeneralNote`: ``isChord``, ``lyrics``, ``notations``, ``editorial``, ``tie``, ``articulations``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.note.GeneralNote`: ``color``, ``lyric``, ``musicxml``, ``quarterLength``

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    .. method:: splitNoteAtPoint()

    Split a Note into two Notes. 

    >>> a = NotRest()
    >>> a.duration.type = 'whole'
    >>> b, c = a.splitNoteAtPoint(3)
    >>> b.duration.type
    'half' 
    >>> b.duration.dots
    1 
    >>> b.duration.quarterLength
    3.0 
    >>> c.duration.type
    'quarter' 
    >>> c.duration.dots
    0 
    >>> c.duration.quarterLength
    1.0 

    Methods inherited from :class:`music21.note.GeneralNote`: ``addLyric()``, ``appendDuration()``, ``clearDurations()``, ``compactNoteInfo()``, ``splitAtDurations()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class GeneralNote
-----------------

.. class:: GeneralNote

    A GeneralNote object is the parent object for the Note, Rest, Unpitched, and SimpleNote, etc. objects It contains duration, notations, editorial, and tie fields. 

    Class inherits from: :class:`music21.base.Music21Object`

    .. attribute:: isChord

    bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. 

    .. attribute:: lyrics

    list() -> new list list(sequence) -> new list initialized from sequence's items 

    .. attribute:: notations

    list() -> new list list(sequence) -> new list initialized from sequence's items 

    .. attribute:: editorial

    EditorialComments that can be applied to notes 

    >>> a = NoteEditorial()
    >>> a.misc
    {} 

    .. attribute:: tie

    No documentation. 

    .. attribute:: articulations

    list() -> new list list(sequence) -> new list initialized from sequence's items 

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    .. attribute:: color

    No documentation. 

    .. attribute:: lyric

    returns the first Lyric's text todo: should return a \n separated string of lyrics 

    .. attribute:: musicxml

    This must call _getMX to get basic mxNote objects 

    .. attribute:: quarterLength

    Return quarter length 

    >>> n = Note()
    >>> n.quarterLength = 2.0
    >>> n.quarterLength
    2.0 

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    .. method:: addLyric()

    adds another lyric to the note's lyric list optionally with a certain lyric number 

    >>> n1 = Note()
    >>> n1.addLyric("hello")
    >>> n1.lyrics[0].text
    'hello' 
    >>> n1.lyrics[0].number
    1 
    ## note that the option number specified gives the lyric number, not the list position 
    >>> n1.addLyric("bye", 3)
    >>> n1.lyrics[1].text
    'bye' 
    >>> n1.lyrics[1].number
    3 
    ## replace existing lyric 
    >>> n1.addLyric("ciao", 3)
    >>> n1.lyrics[1].text
    'ciao' 
    >>> n1.lyrics[1].number
    3 

    .. method:: appendDuration()

    Sets the duration of the note to the supplied duration.Duration object 

    >>> a = Note()
    >>> a.duration.clear() # remove default
    >>> a.appendDuration(duration.Duration('half'))
    >>> a.duration.quarterLength
    2.0 
    >>> a.appendDuration(duration.Duration('whole'))
    >>> a.duration.quarterLength
    6.0 

    

    .. method:: clearDurations()

    clears all the durations stored in the note. After performing this, it's probably not wise to print the note until at least one duration.Duration is added 

    .. method:: compactNoteInfo()

    nice debugging info tool -- returns information about a note E- E 4 flat 16th 0.166666666667 & is a tuplet (in fact STOPS the tuplet) 

    .. method:: splitAtDurations()

    Takes a Note and returns a list of notes with only a single duration.Duration each. 

    >>> a = Note()
    >>> a.duration.clear() # remove defaults
    >>> a.appendDuration(duration.Duration('half'))
    >>> a.duration.quarterLength
    2.0 
    >>> a.appendDuration(duration.Duration('whole'))
    >>> a.duration.quarterLength
    6.0 
    >>> b = a.splitAtDurations()
    >>> b[0].pitch == b[1].pitch
    True 
    >>> b[0].duration.type
    'half' 
    >>> b[1].duration.type
    'whole' 

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class Tie
---------

.. class:: Tie

    Object added to notes that are tied to other notes 

    >>> note1 = Note()
    >>> note1.tie = Tie("start")
    >>> note1.tieStyle = "normal" # or could be dotted or dashed
    >>> note1.tie.type
    'start' 
    Differences from MusicXML: 
    notes do not need to know if they are tied from a 
    previous note.  i.e., you can tie n1 to n2 just with 
    a tie start on n1.  However, if you want proper musicXML output 
    you need a tie stop on n2 
    one tie with "continue" implies tied from and tied to 
    optional (to know what notes are next:) 
    .to = note()   # not implimented yet, b/c of garbage coll. 
    .from = note() 
    (question: should notes be able to be tied to multiple notes 
    for the case where a single note is tied both voices of a 
    two-note-head unison?) 

    Class inherits from: :class:`music21.base.Music21Object`

    .. attribute:: type

    str(object) -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. 

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    .. attribute:: mx

    No documentation. 

    Properties inherited from :class:`music21.base.Music21Object`: ``duration``, ``offset``, ``parent``, ``priority``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``isClass()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


