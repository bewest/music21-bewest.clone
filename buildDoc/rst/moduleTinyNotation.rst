.. _moduleTinyNotation:

music21.tinyNotation
====================

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.tinyNotation



tinyNotation -- a simple way of specifying single line melodies
that uses a notation somewhat similar to Lilypond but with WAY fewer 
examples.  Originally developed to notate trecento (medieval Italian)
music, but it's pretty useful for a lot of short examples.  

tinyNotation is not meant to expand to cover every single case.  Instead
it is meant to be subclassable to extend to the cases *your* project needs.
See for instance the harmony examples in HarmonyNotationLine and HarmonyNotationNote
or the Trecento specific examples in trecento/cadencebook.py

Class TinyNotationNote
----------------------

.. class:: TinyNotationNote

    

    >>> tcN = TinyNotationNote("AA-4.~=aflat_hel-")
    >>> note1 = tcN.note
    >>> note1.name
    'A-' 
    >>> note1.octave
    2 
    >>> note1.lyric
    'hel-' 
    >>> note1.id
    'aflat' 

    

    .. attribute:: DBLDOT

    Compiled regular expression objects 

    .. attribute:: DOT

    Compiled regular expression objects 

    .. attribute:: EDFLAT

    Compiled regular expression objects 

    .. attribute:: EDNAT

    Compiled regular expression objects 

    .. attribute:: EDSHARP

    Compiled regular expression objects 

    .. attribute:: FLAT

    Compiled regular expression objects 

    .. attribute:: ID_EL

    Compiled regular expression objects 

    .. attribute:: LYRIC

    Compiled regular expression objects 

    .. attribute:: OCTAVE2

    Compiled regular expression objects 

    .. attribute:: OCTAVE3

    Compiled regular expression objects 

    .. attribute:: OCTAVE4

    Compiled regular expression objects 

    .. attribute:: OCTAVE5

    Compiled regular expression objects 

    .. attribute:: PRECTIE

    Compiled regular expression objects 

    .. attribute:: REST

    Compiled regular expression objects 

    .. attribute:: SHARP

    Compiled regular expression objects 

    .. attribute:: TIE

    Compiled regular expression objects 

    .. attribute:: TYPE

    Compiled regular expression objects 

    .. method:: customNotationMatch()

    No documentation. 

    .. method:: customPitchMatch()

    method to create a note object in sub classes of tiny notation. Should return a Note-like object or None 

    .. method:: getDots()

    subclassable method to set the dots attributes of the duration object. It is subclassed in music21.trecento.cadencebook.TrecentoNote where double dots are redefined as referring to multiply by 2.25 (according to a practice used by some Medieval musicologists). 


Class TinyNotationStream
------------------------

.. class:: TinyNotationStream

    A TinyNotationStream takes in a string representation similar to Lilypond format but simplified somewhat and an optional time signature string (or TimeSignature object). example in 3/4: 

    >>> stream1 = TinyNotationStream("E4 r f# g=lastG trip{b-8 a g} c", "3/4")
    >>> stream1.getElementById("lastG").step
    'G' 
    >>> stream1.notes[1].isRest
    True 
    >>> stream1.notes[0].octave
    3 

    Class inherits from: :class:`music21.stream.Stream`, :class:`music21.base.Music21Object`

    .. attribute:: ENDBRAC

    Compiled regular expression objects 

    .. attribute:: QUAD

    Compiled regular expression objects 

    .. attribute:: TRIP

    Compiled regular expression objects 

    .. attribute:: stringRep

    str(object) -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. 

    Attributes inherited from :class:`music21.stream.Stream`: ``flattenedRepresentationOf``, ``isFlat``, ``isSorted``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.stream.Stream`: ``measures``, ``notes``, ``pitches``, ``duration``, ``elements``, ``flat``, ``highestOffset``, ``highestTime``, ``isGapless``, ``lily``, ``lowestOffset``, ``musicxml``, ``mx``, ``semiFlat``, ``sorted``

    Properties inherited from :class:`music21.base.Music21Object`: ``offset``, ``parent``, ``priority``

    .. method:: getNote()

    called out so as to be subclassable 

    Methods inherited from :class:`music21.stream.Stream`: ``addGroupForElements()``, ``allPlayingWhileSounding()``, ``append()``, ``attachIntervalsBetweenStreams()``, ``bestClef()``, ``extendDuration()``, ``extractContext()``, ``findConsecutiveNotes()``, ``findGaps()``, ``getElementAfterElement()``, ``getElementAfterOffset()``, ``getElementAtOrAfter()``, ``getElementAtOrBefore()``, ``getElementBeforeElement()``, ``getElementBeforeOffset()``, ``getElementById()``, ``getElementsByClass()``, ``getElementsByGroup()``, ``getElementsByOffset()``, ``getGroups()``, ``getInstrument()``, ``getMeasures()``, ``getNotes()``, ``getOffsetByElement()``, ``getOverlaps()``, ``getPitches()``, ``getSimultaneous()``, ``getTimeSignatures()``, ``groupElementsByOffset()``, ``index()``, ``insert()``, ``insertAtIndex()``, ``insertAtNativeOffset()``, ``isClass()``, ``isSequence()``, ``makeAccidentals()``, ``makeBeams()``, ``makeMeasures()``, ``makeRests()``, ``makeTies()``, ``melodicIntervals()``, ``playingWhenAttacked()``, ``pop()``, ``repeatAppend()``, ``repeatInsert()``, ``shiftElements()``, ``simultaneousAttacks()``, ``splitByClass()``, ``stripTies()``, ``transferOffsetToElements()``, ``trimPlayingWhileSounding()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class HarmonyStream
-------------------

.. class:: HarmonyStream

    example of subclassing TinyNotationStream to include a possible harmonic representation of the note 

    >>> michelle = "c2*F*_Mi- c_chelle r4*B-m7* d-_ma A-2_belle "
    >>> michelle += "G4*E-*_these c_are A-_words G_that "
    >>> michelle += "F*Ddim*_go A-_to- Bn_geth- A-_er"
    >>> hns = HarmonyStream(michelle, "4/4")
    >>> ns = hns.notes
    >>> ns[0].step
    'C' 
    >>> ns[0].editorial.misc['harmony']
    'F' 
    >>> ns[0].lyric
    'Mi-' 
    >>> ns[2].isRest
    True 
    >>> ns[5].name
    'G' 
    >>> ns[7].name
    'A-' 

    

    Class inherits from: :class:`music21.tinyNotation.TinyNotationStream`, :class:`music21.stream.Stream`, :class:`music21.base.Music21Object`

    Attributes inherited from :class:`music21.tinyNotation.TinyNotationStream`: ``ENDBRAC``, ``QUAD``, ``TRIP``, ``stringRep``

    Attributes inherited from :class:`music21.stream.Stream`: ``flattenedRepresentationOf``, ``isFlat``, ``isSorted``

    Attributes inherited from :class:`music21.base.Music21Object`: ``id``, ``groups``

    Properties inherited from :class:`music21.stream.Stream`: ``measures``, ``notes``, ``pitches``, ``duration``, ``elements``, ``flat``, ``highestOffset``, ``highestTime``, ``isGapless``, ``lily``, ``lowestOffset``, ``musicxml``, ``mx``, ``semiFlat``, ``sorted``

    Properties inherited from :class:`music21.base.Music21Object`: ``offset``, ``parent``, ``priority``

    .. method:: getNote()

    No documentation. 

    Methods inherited from :class:`music21.stream.Stream`: ``addGroupForElements()``, ``allPlayingWhileSounding()``, ``append()``, ``attachIntervalsBetweenStreams()``, ``bestClef()``, ``extendDuration()``, ``extractContext()``, ``findConsecutiveNotes()``, ``findGaps()``, ``getElementAfterElement()``, ``getElementAfterOffset()``, ``getElementAtOrAfter()``, ``getElementAtOrBefore()``, ``getElementBeforeElement()``, ``getElementBeforeOffset()``, ``getElementById()``, ``getElementsByClass()``, ``getElementsByGroup()``, ``getElementsByOffset()``, ``getGroups()``, ``getInstrument()``, ``getMeasures()``, ``getNotes()``, ``getOffsetByElement()``, ``getOverlaps()``, ``getPitches()``, ``getSimultaneous()``, ``getTimeSignatures()``, ``groupElementsByOffset()``, ``index()``, ``insert()``, ``insertAtIndex()``, ``insertAtNativeOffset()``, ``isClass()``, ``isSequence()``, ``makeAccidentals()``, ``makeBeams()``, ``makeMeasures()``, ``makeRests()``, ``makeTies()``, ``melodicIntervals()``, ``playingWhenAttacked()``, ``pop()``, ``repeatAppend()``, ``repeatInsert()``, ``shiftElements()``, ``simultaneousAttacks()``, ``splitByClass()``, ``stripTies()``, ``transferOffsetToElements()``, ``trimPlayingWhileSounding()``

    Methods inherited from :class:`music21.base.Music21Object`: ``addContext()``, ``addLocationAndParent()``, ``getContextAttr()``, ``getContextByClass()``, ``getOffsetBySite()``, ``searchParent()``, ``setContextAttr()``, ``show()``, ``write()``


Class HarmonyNote
-----------------

.. class:: HarmonyNote


    Class inherits from: :class:`music21.tinyNotation.TinyNotationNote`

    .. attribute:: HARMONY

    Compiled regular expression objects 

    Attributes inherited from :class:`music21.tinyNotation.TinyNotationNote`: ``DBLDOT``, ``DOT``, ``EDFLAT``, ``EDNAT``, ``EDSHARP``, ``FLAT``, ``ID_EL``, ``LYRIC``, ``OCTAVE2``, ``OCTAVE3``, ``OCTAVE4``, ``OCTAVE5``, ``PRECTIE``, ``REST``, ``SHARP``, ``TIE``, ``TYPE``

    .. method:: customNotationMatch()

    checks to see if a note has markup in the form *TEXT* and if so, stores TEXT in the notes editorial.misc[] dictionary object See the demonstration in the docs for class HarmonyLine. 

    Methods inherited from :class:`music21.tinyNotation.TinyNotationNote`: ``customPitchMatch()``, ``getDots()``


