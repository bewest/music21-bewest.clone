.. _moduleConverter:

music21.converter
=================

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.converter

Public interface for importing file formats into music21. 


.. function:: parse(value, forceSource=False)

Given a file path, encoded data in a Python string, or a URL, attempt to parse the item into a Stream. Note: URL downloading will not happen automatically unless the user has set their Environment "autoDownload" preference to "allow". 

.. function:: parseFile(fp, forceSource=False)

Given a file path, attempt to parse the file into a Stream. 

.. function:: parseData(dataStr)

Given musical data represented within a Python string, attempt to parse the data into a Stream. 

.. function:: parseURL(url, forceSource=False)

Given a URL, attempt to download and parse the file into a Stream. Note: URL downloading will not happen automatically unless the user has set their Environment "autoDownload" preference to "allow". 

class Converter
---------------

.. class:: Converter

    Not a subclass, but a wrapper for different converter objects based on format. 

    

    **class Converter** **properties**

    .. attribute:: stream

    No documentation. 

    **class Converter** **methods**

    .. method:: __init__()

    No documentation. 

    .. method:: parseData(dataStr)

    need to look at data and determine if it is xml or humdrum 

    .. method:: parseFile(fp, forceSource=False)

    No documentation. 

    .. method:: parseURL(url)

    Given a url, download and parse the file into a Stream. 


class ConverterMusicXML
-----------------------

.. class:: ConverterMusicXML


    

    **class ConverterMusicXML** **properties**

    .. attribute:: stream

    No documentation. 

    **class ConverterMusicXML** **methods**

    .. method:: __init__(forceSource)

    No documentation. 

    .. method:: getPartNames()

    No documentation. 

    .. method:: load()

    Load all parts. This determines the order parts are found in the stream 

    .. method:: parseData(xmlString)

    Open from a string 

    .. method:: parseFile(fp)

    Open from file path; check to see if there is a pickled version available and up to date; if so, open that, otherwise open source. 


class ConverterHumdrum
----------------------

.. class:: ConverterHumdrum


    

    **class ConverterHumdrum** **attributes**

    .. attribute:: stream

    No documentation. 

    **class ConverterHumdrum** **methods**

    .. method:: __init__()

    No documentation. 

    .. method:: parseData(humdrumString)

    Open from a string 

    .. method:: parseFile(filepath)

    Open from file path 


class PickleFilter
------------------

.. class:: PickleFilter

    Before opening a file path, this class can check if there is an up to date version pickled and stored in the scratch directory. If the user has not specified a scratch directory, a pickle path will not be created. 

    

    **class PickleFilter** **methods**

    .. method:: __init__(fp, forceSource=False)

    Provide a file path to check if there is pickled version. If forceSource is True, pickled files, if available, will not be returned. 

    .. method:: status()

    No documentation. 


