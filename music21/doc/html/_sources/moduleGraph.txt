.. _moduleGraph:

music21.graph
=============

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.graph

Object definitions for graphing and plotting :class:`~music21.stream.Stream` objects. The :class:`~music21.graph.Graph` object subclasses abstract fundamental graphing archetypes using the matplotlib library. The :class:`~music21.graph.Plot` object subclasses provide reusable approaches to graphing data and structures in :class:`~music21.stream.Stream` objects. 


.. function:: plotStream(streamObj, *args, **keywords)

    Given a stream and any keyword configuration arguments, create and display a plot. Note: plots requires matplotib to be installed. Plot method can be specified as a second argument or by keyword. Available plots include the following: pitchSpace (:class:`~music21.graph.PlotHistogramPitchSpace`) pitchClass (:class:`~music21.graph.PlotHistogramPitchClass`) quarterLength (:class:`~music21.graph.PlotHistogramQuarterLength`) scatterPitchSpaceQuarterLength (:class:`~music21.graph.PlotScatterPitchSpaceQuarterLength`) scatterPitchClassQuarterLength (:class:`~music21.graph.PlotScatterPitchClassQuarterLength`) scatterPitchClassOffset (':class:`~graph.PlotScatterPitchClassOffset`) pitchClassOffset (:class:`~music21.graph.PlotHorizontalBarPitchSpaceOffset`) pitchSpaceOffset (:class:`~music21.graph.PlotHorizontalBarPitchClassOffset`) pitchSpaceQuarterLengthCount (:class:`~music21.graph.PlotScatterWeightedPitchSpaceQuarterLength`) pitchClassQuarterLengthCount (:class:`~music21.graph.PlotScatterWeightedPitchClassQuarterLength`) 3DPitchSpaceQuarterLengthCount (:class:`~music21.graph.Plot3DBarsPitchSpaceQuarterLength`) 

    

PlotHistogramPitchSpace
-----------------------

.. class:: PlotHistogramPitchSpace(streamObj, *args, **keywords)

    A histogram of pitch space. 

.. image:: images/PlotHistogramPitchSpace.* 
:width: 600 

    

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotHistogramPitchSpace(s)
    >>> a.id
    'histogram-pitch' 

    inherits from: :class:`~music21.graph.PlotHistogram`, :class:`~music21.graph.PlotStream`

    **PlotHistogramPitchSpace** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotHistogram`: :attr:`~music21.graph.PlotHistogram.format`

    **PlotHistogramPitchSpace** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHistogramPitchSpace** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotHistogramPitchClass
-----------------------

.. class:: PlotHistogramPitchClass(streamObj, *args, **keywords)

    A histogram of pitch class 

.. image:: images/PlotHistogramPitchClass.* 
:width: 600 

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotHistogramPitchClass(s)
    >>> a.id
    'histogram-pitchClass' 

    inherits from: :class:`~music21.graph.PlotHistogram`, :class:`~music21.graph.PlotStream`

    **PlotHistogramPitchClass** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotHistogram`: :attr:`~music21.graph.PlotHistogram.format`

    **PlotHistogramPitchClass** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHistogramPitchClass** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotHistogramQuarterLength
--------------------------

.. class:: PlotHistogramQuarterLength(streamObj, *args, **keywords)

    A histogram of pitch class 

.. image:: images/PlotHistogramQuarterLength.* 
:width: 600 

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotHistogramQuarterLength(s)
    >>> a.id
    'histogram-quarterLength' 

    inherits from: :class:`~music21.graph.PlotHistogram`, :class:`~music21.graph.PlotStream`

    **PlotHistogramQuarterLength** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotHistogram`: :attr:`~music21.graph.PlotHistogram.format`

    **PlotHistogramQuarterLength** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHistogramQuarterLength** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchSpaceQuarterLength
----------------------------------

.. class:: PlotScatterPitchSpaceQuarterLength(streamObj, *args, **keywords)

    A scatter plot of pitch space and quarter length 

.. image:: images/PlotScatterPitchSpaceQuarterLength.* 
:width: 600 

    >>> from music21 import corpus
    >>> s = corpus.parseWork('bach/bwv324.xml')
    >>> a = PlotHistogramQuarterLength(s)
    >>> a.id
    'histogram-quarterLength' 

    inherits from: :class:`~music21.graph.PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchSpaceQuarterLength** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatter`: :attr:`~music21.graph.PlotScatter.format`

    **PlotScatterPitchSpaceQuarterLength** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterPitchSpaceQuarterLength** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchClassQuarterLength
----------------------------------

.. class:: PlotScatterPitchClassQuarterLength(streamObj, *args, **keywords)

    A scatter plot of pitch class and quarter length 

.. image:: images/PlotScatterPitchClassQuarterLength.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchClassQuarterLength** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatter`: :attr:`~music21.graph.PlotScatter.format`

    **PlotScatterPitchClassQuarterLength** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterPitchClassQuarterLength** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchClassOffset
---------------------------

.. class:: PlotScatterPitchClassOffset(streamObj, *args, **keywords)

    A scatter plot of pitch class and offset 

.. image:: images/PlotScatterPitchClassOffset.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchClassOffset** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatter`: :attr:`~music21.graph.PlotScatter.format`

    **PlotScatterPitchClassOffset** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterPitchClassOffset** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotHorizontalBarPitchSpaceOffset
---------------------------------

.. class:: PlotHorizontalBarPitchSpaceOffset(streamObj, *args, **keywords)

    A graph of events, sorted by pitch space, over time 

.. image:: images/PlotHorizontalBarPitchSpaceOffset.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotHorizontalBar`, :class:`~music21.graph.PlotStream`

    **PlotHorizontalBarPitchSpaceOffset** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotHorizontalBar`: :attr:`~music21.graph.PlotHorizontalBar.format`

    **PlotHorizontalBarPitchSpaceOffset** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHorizontalBarPitchSpaceOffset** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotHorizontalBarPitchClassOffset
---------------------------------

.. class:: PlotHorizontalBarPitchClassOffset(streamObj, *args, **keywords)

    A graph of events, sorted by pitch class, over time 

.. image:: images/PlotHorizontalBarPitchClassOffset.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotHorizontalBar`, :class:`~music21.graph.PlotStream`

    **PlotHorizontalBarPitchClassOffset** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotHorizontalBar`: :attr:`~music21.graph.PlotHorizontalBar.format`

    **PlotHorizontalBarPitchClassOffset** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHorizontalBarPitchClassOffset** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterWeightedPitchSpaceQuarterLength
------------------------------------------

.. class:: PlotScatterWeightedPitchSpaceQuarterLength(streamObj, *args, **keywords)

    A graph of event, sorted by pitch, over time 

.. image:: images/PlotScatterWeightedPitchSpaceQuarterLength.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotScatterWeighted`, :class:`~music21.graph.PlotStream`

    **PlotScatterWeightedPitchSpaceQuarterLength** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatterWeighted`: :attr:`~music21.graph.PlotScatterWeighted.format`

    **PlotScatterWeightedPitchSpaceQuarterLength** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterWeightedPitchSpaceQuarterLength** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterWeightedPitchClassQuarterLength
------------------------------------------

.. class:: PlotScatterWeightedPitchClassQuarterLength(streamObj, *args, **keywords)

    A graph of event, sorted by pitch class, over time. 

.. image:: images/PlotScatterWeightedPitchClassQuarterLength.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotScatterWeighted`, :class:`~music21.graph.PlotStream`

    **PlotScatterWeightedPitchClassQuarterLength** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatterWeighted`: :attr:`~music21.graph.PlotScatterWeighted.format`

    **PlotScatterWeightedPitchClassQuarterLength** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterWeightedPitchClassQuarterLength** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


Plot3DBarsPitchSpaceQuarterLength
---------------------------------

.. class:: Plot3DBarsPitchSpaceQuarterLength(streamObj, *args, **keywords)

    A scatter plot of pitch and quarter length 

.. image:: images/Plot3DBarsPitchSpaceQuarterLength.* 
:width: 600 

    inherits from: :class:`~music21.graph.Plot3DBars`, :class:`~music21.graph.PlotStream`

    **Plot3DBarsPitchSpaceQuarterLength** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.Plot3DBars`: :attr:`~music21.graph.Plot3DBars.format`

    **Plot3DBarsPitchSpaceQuarterLength** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **Plot3DBarsPitchSpaceQuarterLength** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


Graph
-----

.. class:: Graph(*args, **keywords)

    An object representing a graph or plot, automating the creation and configuration of this graph in matplotlib. Graph objects do not manipulate Streams or other music21 data; they only manipulate raw data formatted for each Graph subclass. Numerous keyword arguments can be provided for configuration: alpha,  colorBackgroundData, colorBackgroundFigure, colorGrid, title, doneAction, figureSize, colors, tickFontSize, titleFontSize, labelFontSize, fontFamily. The doneAction determines what happens after graph processing: either write a file ('write'), open an interactive GUI browser ('show') or None (do processing but do not write output. 

    Setup a basic graph with a dictionary for two or more axis values. Set options for grid and other parameters. Optional keyword arguments: title, doneAction 

    >>> a = Graph()
    >>> a = Graph(title='green')

    

    **Graph** **attributes**

        .. attribute:: axis

            dict() -> new empty dictionary. dict(mapping) -> new dictionary initialized from a mapping object's (key, value) pairs. dict(seq) -> new dictionary initialized as if via: d = {} for k, v in seq: d[k] = v dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2) 

        Attributes without Documentation: `fontFamily`, `doneAction`, `title`, `colorBackgroundFigure`, `colors`, `tickFontSize`, `colorGrid`, `figureSize`, `colorBackgroundData`, `axisKeys`, `grid`, `titleFontSize`, `alpha`, `labelFontSize`, `data`

    **Graph** **methods**

        .. method:: done(fp=None)

            Implement the desired doneAction, after data processing 

        .. method:: process()

            process data and prepare plot 

        .. method:: setAxisLabel(axisKey, label)

            No documentation. 

        .. method:: setAxisRange(axisKey, valueRange, pad=False)

            No documentation. 

        .. method:: setData(data)

            No documentation. 

        .. method:: setDoneAction(action)

            No documentation. 

        .. method:: setFigureSize(figSize)

            No documentation. 

        .. method:: setTicks(axisKey, pairs)

            paris are positions and labels 

        .. method:: setTitle(title)

            No documentation. 

        .. method:: show()

            Calls the show() method of the matplotlib plot. For most matplotlib back ends, this will open a GUI window with the desired graph. 

        .. method:: write(fp=None)

            Writes the graph to a file. If no file path is given, a temporary file is used. 


Graph3DPolygonBars
------------------

.. class:: Graph3DPolygonBars(*args, **keywords)


    Graph multiple parallel bar graphs in 3D. This draws bars with polygons, a temporary alternative to using Graph3DBars, above. Note: Due to matplotib issue Axis ticks do not seem to be adjustable without distorting the graph. 

.. image:: images/Graph3DPolygonBars.* 
:width: 600 

    >>> a = Graph3DPolygonBars(doneAction=None)
    >>> data = {1:[], 2:[], 3:[]}
    >>> for i in range(len(data.keys())):
    ...    q = [(x, random.choice(range(10*(i+1)))) for x in range(20)] 
    ...    data[data.keys()[i]] = q 
    >>> a.setData(data)
    >>> a.process()

    

    

    inherits from: :class:`~music21.graph.Graph`

    **Graph3DPolygonBars** **attributes**

        Attributes without Documentation: `barWidth`

        Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **Graph3DPolygonBars** **methods**

        .. method:: process()

            No documentation. 

        Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


GraphColorGrid
--------------

.. class:: GraphColorGrid(*args, **keywords)

    Grid of discrete colored "blocks" to visualize results of a windowed analysis routine. Data is provided as a list of lists of colors, based on analysis-specific mapping of colors to results 

    

    >>> a = GraphColorGrid(doneAction=None)
    >>> data = [['#525252', '#5f5f5f', '#797979', '#858585', '#727272', '#6c6c6c', '#8c8c8c', '#8c8c8c', '#6c6c6c', '#999999', '#999999', '#797979', '#6c6c6c', '#5f5f5f', '#525252', '#464646', '#3f3f3f', '#3f3f3f', '#4c4c4c', '#4c4c4c', '#797979', '#797979', '#4c4c4c', '#4c4c4c', '#525252', '#5f5f5f', '#797979', '#858585', '#727272', '#6c6c6c'], ['#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#797979', '#6c6c6c', '#5f5f5f', '#5f5f5f', '#858585', '#797979', '#797979', '#797979', '#797979', '#797979', '#797979', '#858585', '#929292', '#999999'], ['#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#8c8c8c', '#8c8c8c', '#8c8c8c', '#858585', '#797979', '#858585', '#929292', '#999999'], ['#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#8c8c8c', '#929292', '#999999'], ['#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999', '#999999'], ['#999999', '#999999', '#999999', '#999999', '#999999']]
    >>> a.setData(data)
    >>> a.process()

    inherits from: :class:`~music21.graph.Graph`

    **GraphColorGrid** **attributes**

        Attributes without Documentation: `windowStep`, `maxWindow`, `minWindow`

        Attributes inherited from :class:`~music21.graph.Graph`: :attr:`~music21.graph.Graph.fontFamily`, :attr:`~music21.graph.Graph.doneAction`, :attr:`~music21.graph.Graph.title`, :attr:`~music21.graph.Graph.colorBackgroundFigure`, :attr:`~music21.graph.Graph.colors`, :attr:`~music21.graph.Graph.tickFontSize`, :attr:`~music21.graph.Graph.colorGrid`, :attr:`~music21.graph.Graph.figureSize`, :attr:`~music21.graph.Graph.colorBackgroundData`, :attr:`~music21.graph.Graph.axisKeys`, :attr:`~music21.graph.Graph.grid`, :attr:`~music21.graph.Graph.titleFontSize`, :attr:`~music21.graph.Graph.alpha`, :attr:`~music21.graph.Graph.labelFontSize`, :attr:`~music21.graph.Graph.data`, :attr:`~music21.graph.Graph.axis`

    **GraphColorGrid** **methods**

        .. method:: process()

            No documentation. 

        .. method:: setColors(colors)

            No documentation. 

        .. method:: setMaxWindow(maxWindow)

            No documentation. 

        .. method:: setMinWindow(minWindow)

            No documentation. 

        .. method:: setWindowStep(windowStep)

            No documentation. 

        Methods inherited from :class:`~music21.graph.Graph`: :meth:`~music21.graph.Graph.done`, :meth:`~music21.graph.Graph.setAxisLabel`, :meth:`~music21.graph.Graph.setAxisRange`, :meth:`~music21.graph.Graph.setData`, :meth:`~music21.graph.Graph.setDoneAction`, :meth:`~music21.graph.Graph.setFigureSize`, :meth:`~music21.graph.Graph.setTicks`, :meth:`~music21.graph.Graph.setTitle`, :meth:`~music21.graph.Graph.show`, :meth:`~music21.graph.Graph.write`


GraphHistogram
--------------

.. class:: GraphHistogram(*args, **keywords)


    Graph the count of a single element. Data set is simply a list of x and y pairs, where there is only one of each x value, and y value is the count or magnitude of that value 

.. image:: images/GraphHistogram.* 
:width: 600 

    >>> a = GraphHistogram(doneAction=None)
    >>> data = [(x, random.choice(range(30))) for x in range(50)]
    >>> a.setData(data)
    >>> a.process()

    

    inherits from: :class:`~music21.graph.Graph`


GraphHorizontalBar
------------------

.. class:: GraphHorizontalBar(*args, **keywords)


    Numerous horizontal bars in discrete channels, where bars can be incomplete and/or overlap. Data provided is a list of pairs, where the first value becomes the key, the second value is a list of x-start, x-length values. 

.. image:: images/GraphHorizontalBarComposers.* 
:width: 600 

    >>> from music21 import *
    >>> a = graph.GraphHorizontalBar(doneAction='show')
    >>> data = [('Chopin', [(1810, 1849-1810)]), ('Schumanns', [(1810, 1856-1810), (1819, 1896-1819)]), ('Brahms', [(1833, 1897-1833)])]
    >>> a.setData(data)
    >>> a.process()

    

    inherits from: :class:`~music21.graph.Graph`


GraphScatter
------------

.. class:: GraphScatter(*args, **keywords)


    Graph two parameters in a scatter plot. Data representation is a list of points of values. 

.. image:: images/GraphScatter.* 
:width: 600 

    >>> a = GraphScatter(doneAction=None)
    >>> data = [(x, x*x) for x in range(50)]
    >>> a.setData(data)
    >>> a.process()

    

    inherits from: :class:`~music21.graph.Graph`


GraphScatterWeighted
--------------------

.. class:: GraphScatterWeighted(*args, **keywords)

    A scatter plot where points are scaled in size to represent the number of values stored within. 

.. image:: images/GraphScatterWeighted.* 
:width: 600 

    

    A scatter plot where points are scaled in size to represent the number of values stored within. 

    >>> a = GraphScatterWeighted(doneAction=None)
    >>> data = [(23, 15, 234), (10, 23, 12), (4, 23, 5)]
    >>> a.setData(data)
    >>> a.process()

    inherits from: :class:`~music21.graph.Graph`


Plot3DBars
----------

.. class:: Plot3DBars(streamObj, *args, **keywords)

    Base class for Stream plotting classes. 

    inherits from: :class:`~music21.graph.PlotStream`

    **Plot3DBars** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **Plot3DBars** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **Plot3DBars** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotColorGrid
-------------

.. class:: PlotColorGrid(streamObj, AnalysisProcessor, *args, **keywords)


    inherits from: :class:`~music21.graph.PlotStream`

    **PlotColorGrid** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotColorGrid** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotColorGrid** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotColorGridKrumhanslSchmuckler
--------------------------------

.. class:: PlotColorGridKrumhanslSchmuckler(streamObj, *args, **keywords)

    Subclass for plotting Krumhansl-Schmuckler analysis routine 

    inherits from: :class:`~music21.graph.PlotColorGrid`, :class:`~music21.graph.PlotStream`

    **PlotColorGridKrumhanslSchmuckler** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotColorGridKrumhanslSchmuckler** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotColorGridKrumhanslSchmuckler** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotColorGridSadoianAmbitus
---------------------------

.. class:: PlotColorGridSadoianAmbitus(streamObj, *args, **keywords)

    Subclass for plotting basic pitch span over a windowed analysis 

    inherits from: :class:`~music21.graph.PlotColorGrid`, :class:`~music21.graph.PlotStream`

    **PlotColorGridSadoianAmbitus** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotColorGridSadoianAmbitus** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotColorGridSadoianAmbitus** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotHistogram
-------------

.. class:: PlotHistogram(streamObj, *args, **keywords)

    Base class for Stream plotting classes. 

    inherits from: :class:`~music21.graph.PlotStream`

    **PlotHistogram** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotHistogram** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHistogram** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotHorizontalBar
-----------------

.. class:: PlotHorizontalBar(streamObj, *args, **keywords)

    A graph of events, sorted by pitch, over time 

    

    inherits from: :class:`~music21.graph.PlotStream`

    **PlotHorizontalBar** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotHorizontalBar** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotHorizontalBar** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatter
-----------

.. class:: PlotScatter(streamObj, *args, **keywords)

    Base class for 2D Scatter plots. 

    inherits from: :class:`~music21.graph.PlotStream`

    **PlotScatter** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotScatter** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatter** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterPitchSpaceDynamicSymbol
----------------------------------

.. class:: PlotScatterPitchSpaceDynamicSymbol(streamObj, *args, **keywords)

    A graph of dynamics used by pitch space. 

.. image:: images/PlotScatterPitchSpaceDynamicSymbol.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotScatter`, :class:`~music21.graph.PlotStream`

    **PlotScatterPitchSpaceDynamicSymbol** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatter`: :attr:`~music21.graph.PlotScatter.format`

    **PlotScatterPitchSpaceDynamicSymbol** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterPitchSpaceDynamicSymbol** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterWeighted
-------------------

.. class:: PlotScatterWeighted(streamObj, *args, **keywords)


    inherits from: :class:`~music21.graph.PlotStream`

    **PlotScatterWeighted** **attributes**

        Attributes without Documentation: `format`

        Attributes inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.values`

    **PlotScatterWeighted** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterWeighted** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotScatterWeightedPitchSpaceDynamicSymbol
------------------------------------------

.. class:: PlotScatterWeightedPitchSpaceDynamicSymbol(streamObj, *args, **keywords)

    A graph of dynamics used by pitch space. 

.. image:: images/PlotScatterWeightedPitchSpaceDynamicSymbol.* 
:width: 600 

    inherits from: :class:`~music21.graph.PlotScatterWeighted`, :class:`~music21.graph.PlotStream`

    **PlotScatterWeightedPitchSpaceDynamicSymbol** **attributes**

        Attributes without Documentation: `values`

        Attributes inherited from :class:`~music21.graph.PlotScatterWeighted`: :attr:`~music21.graph.PlotScatterWeighted.format`

    **PlotScatterWeightedPitchSpaceDynamicSymbol** **properties**

        Properties inherited from :class:`~music21.graph.PlotStream`: :attr:`~music21.graph.PlotStream.id`

    **PlotScatterWeightedPitchSpaceDynamicSymbol** **methods**

        Methods inherited from :class:`~music21.graph.PlotStream`: :meth:`~music21.graph.PlotStream.process`, :meth:`~music21.graph.PlotStream.remapQuarterLength`, :meth:`~music21.graph.PlotStream.show`, :meth:`~music21.graph.PlotStream.ticksDynamics`, :meth:`~music21.graph.PlotStream.ticksOffset`, :meth:`~music21.graph.PlotStream.ticksPitchClass`, :meth:`~music21.graph.PlotStream.ticksPitchClassUsage`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceChromatic`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceOctave`, :meth:`~music21.graph.PlotStream.ticksPitchSpaceUsage`, :meth:`~music21.graph.PlotStream.ticksQuarterLength`, :meth:`~music21.graph.PlotStream.write`


PlotStream
----------

.. class:: PlotStream(streamObj, flatten=True, *args, **keywords)

    Approaches to plotting and graphing a stream. A base class from which Stream plotting Classes inherit. 

    Provide a Stream as an arguement. If `flatten` is True, the Stream will automatically be flattened. 

    

    **PlotStream** **attributes**

        Attributes without Documentation: `format`, `values`

    **PlotStream** **properties**

        .. attribute:: id

            Each PlotStream has a unique id that consists of its format and a string that defines the parameters that are graphed. 

    **PlotStream** **methods**

        .. method:: process()

            This will process all data, as well as call the done() method. What happens when the done() is called is determined by the the keyword argument `doneAction`; options are 'show' (display immediately), 'write' (write the file to a supplied file path), and None (do processing but do not write or show a graph). 

        .. method:: remapQuarterLength(x)

            Remap all quarter lengths. 

        .. method:: show()

            Call internal Graphs show() method independently of doneAction set and run with process() 

        .. method:: ticksDynamics(minNameIndex=None, maxNameIndex=None)

            Utility method to get ticks in dynamic values. 

            >>> from music21 import stream; s = stream.Stream()
            >>> a = PlotStream(s)
            >>> a.ticksDynamics()
            [[0, 'pppppp'], [1, 'ppppp'], [2, 'pppp'], [3, 'ppp'], [4, 'pp'], [5, 'p'], [6, 'mp'], [7, 'mf'], [8, 'f'], [9, 'fp'], [10, 'sf'], [11, 'ff'], [12, 'fff'], [13, 'ffff'], [14, 'fffff'], [15, 'ffffff']] 
            >>> a.ticksDynamics(3,6)
            [[3, 'ppp'], [4, 'pp'], [5, 'p'], [6, 'mp']] 

            

        .. method:: ticksOffset(offsetMin=None, offsetMax=None, offsetStepSize=None, displayMeasureNumberZero=False, remap=False)

            Get offset ticks. If Measures are found, they will be used to create ticks. If not, `offsetStepSize` will be used to create offset ticks between min and max. The `remap` parameter is not yet used. 

            >>> from music21 import corpus, stream, note
            >>> s = corpus.parseWork('bach/bwv281.xml')
            >>> a = PlotStream(s)
            >>> a.ticksOffset() # on whole score
            [[4.0, '1'], [8.0, '2'], [12.0, '3'], [16.0, '4'], [20.0, '5'], [24.0, '6'], [28.0, '7'], [32.0, '8']] 
            >>> a = PlotStream(s[0]) # on a Part
            >>> a.ticksOffset() # on whole score
            [[4.0, '1'], [8.0, '2'], [12.0, '3'], [16.0, '4'], [20.0, '5'], [24.0, '6'], [28.0, '7'], [32.0, '8']] 
            >>> a.ticksOffset(8, 12, 2)
            [[8.0, '2'], [12.0, '3']] 
            >>> a = PlotStream(s[0].flat) # on a Flat collection
            >>> a.ticksOffset(8, 12, 2)
            [[8.0, '2'], [12.0, '3']] 
            >>> n = note.Note('a') # on a raw collection of notes with no measures
            >>> s = stream.Stream()
            >>> s.repeatAppend(n, 10)
            >>> a = PlotStream(s) # on a Part
            >>> a.ticksOffset() # on whole score
            [[0, '0'], [10, '10']] 

        .. method:: ticksPitchClass(pcMin=0, pcMax=11)

            Utility method to get ticks in pitch classes 

            >>> from music21 import corpus
            >>> s = corpus.parseWork('bach/bwv324.xml')
            >>> a = PlotStream(s)
            >>> a.ticksPitchClass()
            [[0, 'C'], [1, 'C#'], [2, 'D'], [3, 'D#'], [4, 'E'], [5, 'F'], [6, 'F#'], [7, 'G'], [8, 'G#'], [9, 'A'], [10, 'A#'], [11, 'B']] 

        .. method:: ticksPitchClassUsage(pcMin=0, pcMax=11, showEnharmonic=True, blankLabelUnused=True, hideUnused=False)

            Get ticks and labels for pitch classes based on usage. That is, show the most commonly used enharmonic first. 

            >>> from music21 import corpus
            >>> s = corpus.parseWork('bach/bwv324.xml')
            >>> a = PlotStream(s)
            >>> a.ticksPitchClassUsage(hideUnused=True)
            [[0, u'C'], [2, u'D'], [3, u'D#'], [4, u'E'], [6, u'F#'], [7, u'G'], [9, u'A'], [11, u'B']] 
            >>> s = corpus.parseWork('bach/bwv281.xml')
            >>> a = PlotStream(s)
            >>> a.ticksPitchClassUsage(showEnharmonic=True, hideUnused=True)
            [[0, u'C'], [2, u'D'], [3, u'Eb'], [4, u'E'], [5, u'F'], [7, u'G'], [9, u'A'], [10, u'Bb'], [11, u'B']] 
            >>> a.ticksPitchClassUsage(showEnharmonic=True, blankLabelUnused=False)
            [[0, u'C'], [1, 'C#'], [2, u'D'], [3, u'Eb'], [4, u'E'], [5, u'F'], [6, 'F#'], [7, u'G'], [8, 'G#'], [9, u'A'], [10, u'Bb'], [11, u'B']] 
            >>> s = corpus.parseWork('schumann/opus41no1/movement2.xml')
            >>> a = PlotStream(s)
            >>> a.ticksPitchClassUsage(showEnharmonic=True)
            [[0, u'C'], [1, u'Db/C#'], [2, u'D'], [3, u'Eb/D#'], [4, u'E'], [5, u'F'], [6, u'F#'], [7, u'G'], [8, u'Ab/G#'], [9, u'A'], [10, u'Bb'], [11, u'B']] 

        .. method:: ticksPitchSpaceChromatic(pitchMin=36, pitchMax=100)

            Utility method to get ticks in pitch space values. 

            >>> from music21 import stream; s = stream.Stream()
            >>> a = PlotStream(s)
            >>> a.ticksPitchSpaceChromatic(60,72)
            [[60, 'C4'], [61, 'C#4'], [62, 'D4'], [63, 'D#4'], [64, 'E4'], [65, 'F4'], [66, 'F#4'], [67, 'G4'], [68, 'G#4'], [69, 'A4'], [70, 'A#4'], [71, 'B4'], [72, 'C5']] 

        .. method:: ticksPitchSpaceOctave(pitchMin=36, pitchMax=100)

            Utility method to get ticks in pitch space only for every octave. 

            >>> from music21 import stream; s = stream.Stream()
            >>> a = PlotStream(s)
            >>> a.ticksPitchSpaceOctave()
            [[36, 'C2'], [48, 'C3'], [60, 'C4'], [72, 'C5'], [84, 'C6'], [96, 'C7']] 

        .. method:: ticksPitchSpaceUsage(pcMin=36, pcMax=72, showEnharmonic=False, blankLabelUnused=True, hideUnused=False)

            Get ticks and labels for pitch space based on usage. That is, show the most commonly used enharmonic first. 

            >>> from music21 import corpus
            >>> s = corpus.parseWork('bach/bwv324.xml')
            >>> a = PlotStream(s[0])
            >>> a.ticksPitchSpaceUsage(hideUnused=True)
            [[64, u'E4'], [66, u'F#4'], [67, u'G4'], [69, u'A4'], [71, u'B4'], [72, u'C5']] 
            >>> s = corpus.parseWork('schumann/opus41no1/movement2.xml')
            >>> a = PlotStream(s)
            >>> a.ticksPitchSpaceUsage(showEnharmonic=True, hideUnused=True)
            [[36, u'C2'], [38, u'D2'], [40, u'E2'], [41, u'F2'], [43, u'G2'], [44, u'Ab2'], [45, u'A2'], [47, u'B2'], [48, u'C3'], [50, u'D3'], [51, u'Eb3/D#3'], [52, u'E3'], [53, u'F3'], [54, u'F#3'], [55, u'G3'], [56, u'Ab3/G#3'], [57, u'A3'], [58, u'Bb3'], [59, u'B3'], [60, u'C4'], [61, u'Db4/C#4'], [62, u'D4'], [63, u'Eb4/D#4'], [64, u'E4'], [65, u'F4'], [66, u'F#4'], [67, u'G4'], [68, u'Ab4/G#4'], [69, u'A4'], [70, u'Bb4'], [71, u'B4'], [72, u'C5']] 

        .. method:: ticksQuarterLength(min=0.25, max=4, remap=True)

            Get ticks for quarterLength. If `remap` is True, the remapQuarterLength() function will be used to scale displayed quarter lengths by log base 2. 

            >>> from music21 import stream; s = stream.Stream()
            >>> a = PlotStream(s)

        .. method:: write(fp=None)

            Call internal Graphs write() method independently of doneAction set and run with process() 


