.. _moduleInterval:

music21.interval
================

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.interval



Interval.py is a module for creating and manipulating interval objects.
Included classes are Interval, DiatonicInterval, GenericInterval, and ChromaticInterval.
There are also a number of useful lists included in the module.

.. function:: generateChromatic()

generateChromatic(Note, Note) -> ChromaticInterval Generates a ChromaticInterval from the two given notes. 

.. function:: generateDiatonic()

generateDiatonic(GenericInterval, ChromaticInterval) -> DiatonicInterval Generates a DiatonicInterval from the given Generic and Chromatic intervals. 

.. function:: generateInterval()

generateInterval(Note [,Note]) -> Interval Generates an interval from note1 to a generic note, or from note1 to note2.  The generic, chromatic, and diatonic parts of the interval are also generated. 

>>> from music21 import note
>>> aNote = note.Note('c4')
>>> bNote = note.Note('g5')
>>> aInterval = generateInterval(aNote, bNote)
>>> aInterval
<music21.interval.Interval P12> 



.. function:: getAbsoluteLowerNote()

Given two notes, returns the lower note based on actual pitch. If both pitches are the same, returns the first note given. 

.. function:: generatePitch()

generatePitch(Pitch1 (or Note1), Interval1) -> Pitch Generates a Pitch object at the specified interval from the specified Pitch. 

>>> from music21 import pitch
>>> aPitch = pitch.Pitch('C4')
>>> aInterval = generateIntervalFromString('P5')
>>> bPitch = generatePitch(aPitch, aInterval)
>>> bPitch
G4 
>>> bInterval = generateIntervalFromString('P-5')
>>> cPitch = generatePitch(aPitch, bInterval)
>>> cPitch
F3 

.. function:: generateNote()


.. function:: generateIntervalFromString()

generateIntervalFromString(string) -> Interval Generates an interval object based on the given string, such as "P5", "m3", "A2". 

>>> aInterval = generateIntervalFromString('P5')
>>> aInterval
<music21.interval.Interval P5> 
>>> aInterval = generateIntervalFromString('m3')
>>> aInterval
<music21.interval.Interval m3> 



.. function:: getSpecifier()

getSpecifier(GenericInterval, ChromaticInterval) -> specifier Returns the specifier (i.e. MAJOR, MINOR, etc...) of the diatonic interval defined by the given Generic and Chromatic intervals. 



.. function:: getWrittenLowerNote()

Given two notes, returns the lower note based on diatonic note number. Returns the note lower in pitch if the diatonic number is the same, or the first note if pitch is also the same. 

.. function:: getAbsoluteHigherNote()

Given two notes, returns the higher note based on actual pitch. If both pitches are the same, returns the first note given. 

.. function:: getWrittenHigherNote()

Given two notes, returns the higher note based on diatonic note numbers. Returns the note higher in pitch if the diatonic number is the same, or the first note if pitch is also the same. 

>>> from music21 import pitch
>>> cis = pitch.Pitch("C#")
>>> deses = pitch.Pitch("D--")
>>> higher = getWrittenHigherNote(cis, deses)
>>> higher is deses
True 

.. function:: convertDiatonicNumberToStep()

Utility conversion; does not process internals returns a tuple of Step and Octave 

>>> convertDiatonicNumberToStep(15)
('C', 2) 
>>> convertDiatonicNumberToStep(23)
('D', 3) 

.. function:: convertStaffDistanceToInterval()

convertStaffDistanceToInterval(staffDistance) -> intervalDistance Returns the interval number from the given staff distance. 

.. function:: generateGeneric()

generateGeneric(Note, Note) -> GenericInterval Generates a GenericInterval from the two given notes. 

>>> from music21 import note
>>> aNote = note.Note('c4')
>>> bNote = note.Note('g5')
>>> aInterval = generateGeneric(aNote, bNote)
>>> aInterval
<music21.interval.GenericInterval 12> 



Class Interval
--------------

.. class:: Interval

    requires either (1) a string ("P5" etc.) or (2) named arguments: (2a) either both of diatonic  = DiatonicInterval object chromatic = ChromaticInterval object (2b) or both of note1     = Pitch (or Note) object note2     = Pitch (or Note) object in which case it figures out the diatonic and chromatic intervals itself 

    >>> from music21 import note
    >>> n1 = note.Note('c3')
    >>> n2 = note.Note('c5')
    >>> a = Interval(note1=n1, note2=n2)
    >>> a
    <music21.interval.Interval P15> 

    Class inherits from: :class:`music21.base.Music21Object`

    **Class Interval** **Attributes**

    .. attribute:: chromatic

    No documentation. 

    .. attribute:: diatonic

    No documentation. 

    .. attribute:: diatonicType

    No documentation. 

    .. attribute:: direction

    No documentation. 

    .. attribute:: generic

    No documentation. 

    .. attribute:: niceName

    No documentation. 

    .. attribute:: note1

    No documentation. 

    .. attribute:: note2

    No documentation. 

    .. attribute:: type

    No documentation. 

    Attributes inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.id`, :attr:`music21.base.Music21Object.groups`

    **Class Interval** **Properties**

    .. attribute:: complement

    No documentation. 

    Properties inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.duration`, :attr:`music21.base.Music21Object.offset`, :attr:`music21.base.Music21Object.parent`, :attr:`music21.base.Music21Object.priority`

    **Class Interval** **Methods**

    .. method:: getComplement()

    No documentation. 

    .. method:: reinit()

    Reinitialize the internal interval objects in case something has changed.  Called also during __init__ 

    Methods inherited from :class:`music21.base.Music21Object`: :meth:`music21.base.Music21Object.searchParent`, :meth:`music21.base.Music21Object.getContextAttr`, :meth:`music21.base.Music21Object.setContextAttr`, :meth:`music21.base.Music21Object.addContext`, :meth:`music21.base.Music21Object.addLocationAndParent`, :meth:`music21.base.Music21Object.getContextByClass`, :meth:`music21.base.Music21Object.getOffsetBySite`, :meth:`music21.base.Music21Object.isClass`, :meth:`music21.base.Music21Object.show`, :meth:`music21.base.Music21Object.write`


Class DiatonicInterval
----------------------

.. class:: DiatonicInterval


    Class inherits from: :class:`music21.base.Music21Object`

    **Class DiatonicInterval** **Attributes**

    .. attribute:: specifier

    No documentation. 

    .. attribute:: name

    No documentation. 

    Attributes inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.id`, :attr:`music21.base.Music21Object.groups`

    **Class DiatonicInterval** **Properties**

    Properties inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.duration`, :attr:`music21.base.Music21Object.offset`, :attr:`music21.base.Music21Object.parent`, :attr:`music21.base.Music21Object.priority`

    **Class DiatonicInterval** **Methods**

    Methods inherited from :class:`music21.base.Music21Object`: :meth:`music21.base.Music21Object.searchParent`, :meth:`music21.base.Music21Object.getContextAttr`, :meth:`music21.base.Music21Object.setContextAttr`, :meth:`music21.base.Music21Object.addContext`, :meth:`music21.base.Music21Object.addLocationAndParent`, :meth:`music21.base.Music21Object.getContextByClass`, :meth:`music21.base.Music21Object.getOffsetBySite`, :meth:`music21.base.Music21Object.isClass`, :meth:`music21.base.Music21Object.show`, :meth:`music21.base.Music21Object.write`


Class ChromaticInterval
-----------------------

.. class:: ChromaticInterval

    Chromatic interval class -- thinks of everything in semitones chromInt = chromaticInterval (-14) attributes: semitones     # -14 undirected    # 14 mod12         # 10 intervalClass #  2 cents         # -1400 

    Class inherits from: :class:`music21.base.Music21Object`

    **Class ChromaticInterval** **Attributes**

    Attributes inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.id`

    **Class ChromaticInterval** **Properties**

    Properties inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.duration`, :attr:`music21.base.Music21Object.offset`, :attr:`music21.base.Music21Object.parent`, :attr:`music21.base.Music21Object.priority`

    **Class ChromaticInterval** **Methods**

    Methods inherited from :class:`music21.base.Music21Object`: :meth:`music21.base.Music21Object.searchParent`, :meth:`music21.base.Music21Object.getContextAttr`, :meth:`music21.base.Music21Object.setContextAttr`, :meth:`music21.base.Music21Object.addContext`, :meth:`music21.base.Music21Object.addLocationAndParent`, :meth:`music21.base.Music21Object.getContextByClass`, :meth:`music21.base.Music21Object.getOffsetBySite`, :meth:`music21.base.Music21Object.isClass`, :meth:`music21.base.Music21Object.show`, :meth:`music21.base.Music21Object.write`


Class GenericInterval
---------------------

.. class:: GenericInterval

    A generic interval is an interval such as Third, Seventh, Octave, Tenth. Constructor takes an int specifying the interval and direction: staffDistance: the number of lines or spaces apart; E.g. C4 to C4 = 0;  C4 to D4 = 1;  C4 to B3 = -1 

    Class inherits from: :class:`music21.base.Music21Object`

    **Class GenericInterval** **Attributes**

    Attributes inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.id`

    **Class GenericInterval** **Properties**

    Properties inherited from :class:`music21.base.Music21Object`: :attr:`music21.base.Music21Object.duration`, :attr:`music21.base.Music21Object.offset`, :attr:`music21.base.Music21Object.parent`, :attr:`music21.base.Music21Object.priority`

    **Class GenericInterval** **Methods**

    .. method:: complement()

    generates a new GenericInterval object where descending 3rds are 6ths, etc. 

    Methods inherited from :class:`music21.base.Music21Object`: :meth:`music21.base.Music21Object.searchParent`, :meth:`music21.base.Music21Object.getContextAttr`, :meth:`music21.base.Music21Object.setContextAttr`, :meth:`music21.base.Music21Object.addContext`, :meth:`music21.base.Music21Object.addLocationAndParent`, :meth:`music21.base.Music21Object.getContextByClass`, :meth:`music21.base.Music21Object.getOffsetBySite`, :meth:`music21.base.Music21Object.isClass`, :meth:`music21.base.Music21Object.show`, :meth:`music21.base.Music21Object.write`


