.. _moduleNote:

music21.note
============

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.note

Classes and functions for creating and manipulating notes, ties, and durations. Pitch-specific functions are in music21.pitch, but obviously are of great importance here too. 


.. function:: noteFromDiatonicNumber(number)


.. function:: sendNoteInfo(music21noteObject)

    Debugging method to print information about a music21 note called by trecento.trecentoCadence, among other places 

Note
----

.. class:: Note(*arguments, **keywords)

    Note class for notes (not rests or unpitched elements) that can be represented by one or more notational units A Note knows both its total duration and how to express itself as a set of tied notes of different lengths. For instance, a note of 2.5 quarters in length could be half tied to eighth or dotted quarter tied to quarter. A ComplexNote will eventually be smart enough that if given a duration in quarters it will try to figure out a way to express itself as best it can if it needs to be represented on page.  It does not know this now. 

    inherits from: :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`

    **Note** **attributes**

        .. attribute:: isNote

            Boolean read-only value describing if this object is a Note. 

        .. attribute:: isRest

            Boolean read-only value describing if this is a Rest. 

        .. attribute:: isUnpitched

            Boolean read-only value describing if this is Unpitched. 

        .. attribute:: beams

            A :class:`music21.note.Beams` object. 

        .. attribute:: pitch

            A :class:`music21.pitch.Pitch` object. 

        Attributes inherited from :class:`~music21.note.NotRest`: :attr:`~music21.note.NotRest.stemDirection`

        Attributes inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.isChord`, :attr:`~music21.note.GeneralNote.lyrics`, :attr:`~music21.note.GeneralNote.notations`, :attr:`~music21.note.GeneralNote.editorial`, :attr:`~music21.note.GeneralNote.tie`, :attr:`~music21.note.GeneralNote.articulations`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **Note** **properties**

        .. attribute:: nameWithOctave

            Return or set the pitch name with octave from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.nameWithOctave`. 

        .. attribute:: pitchClass

            Return or set the pitch class from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.pitchClass`. 

        .. attribute:: accidental

            Return or set the :class:`music21.pitch.Accidental` object from the :class:`music21.pitch.Pitch` object. 

        .. attribute:: diatonicNoteNum

            Return the diatonic note number from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.diatonicNoteNum`. 

        .. attribute:: freq440

            Return or set the freq440 value from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.freq440`. 

        .. attribute:: frequency

            Return or set the frequency from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.frequency`. 

        .. attribute:: lily

            The name of the note as it would appear in Lilypond format. 

        .. attribute:: midi

            Return or set the numerical MIDI pitch representation from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.midi`. 

        .. attribute:: mx

            Returns a List of mxNotes Attributes of notes are merged from different locations: first from the duration objects, then from the pitch objects. Finally, GeneralNote attributes are added 

        .. attribute:: name

            No documentation. 

        .. attribute:: octave

            Return or set the octave value from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.octave`. 

        .. attribute:: pitchClassString

            Return or set the pitch class string from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.pitchClassString`. 

        .. attribute:: ps

            Return or set the numerical pitch space representation from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.ps`. 

        .. attribute:: step

            Return or set the pitch step from the :class:`music21.pitch.Pitch` object. See :attr:`music21.pitch.Pitch.step`. 

        Properties inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.quarterLength`, :attr:`~music21.note.GeneralNote.beat`, :attr:`~music21.note.GeneralNote.beatDuration`, :attr:`~music21.note.GeneralNote.beatStr`, :attr:`~music21.note.GeneralNote.color`, :attr:`~music21.note.GeneralNote.lyric`, :attr:`~music21.note.GeneralNote.musicxml`

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.duration`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **Note** **methods**

        .. method:: setAccidental(accidental)

            This method is obsolete: use the `accidental` property instead. 

        .. method:: transpose(value, inPlace=False)

            Transpose the Note by the user-provided value. If the value is an integer, the transposition is treated in half steps. If the value is a string, any Interval string specification can be provided. 

            >>> from music21 import *
            >>> a = note.Note('g4')
            >>> b = a.transpose('m3')
            >>> b
            <music21.note.Note B-> 
            >>> aInterval = interval.Interval(-6)
            >>> b = a.transpose(aInterval)
            >>> b
            <music21.note.Note C#> 
            >>> a.transpose(aInterval, inPlace=True)
            >>> a
            <music21.note.Note C#> 

            

        Methods inherited from :class:`~music21.note.NotRest`: :meth:`~music21.note.NotRest.splitNoteAtPoint`

        Methods inherited from :class:`~music21.note.GeneralNote`: :meth:`~music21.note.GeneralNote.addLyric`, :meth:`~music21.note.GeneralNote.augmentOrDiminish`, :meth:`~music21.note.GeneralNote.compactNoteInfo`, :meth:`~music21.note.GeneralNote.splitAtDurations`, :meth:`~music21.note.GeneralNote.splitByQuarterLengths`

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.isClass`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


Rest
----

.. class:: Rest(*arguments, **keywords)

    General rest class 

    inherits from: :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`

    **Rest** **attributes**

        .. attribute:: isNote

            Boolean read-only value describing if this object is a Chord. Is False 

        .. attribute:: isRest

            Boolean read-only value describing if this is a Rest. Is False 

        Attributes without Documentation: `isUnpitched`, `name`

        Attributes inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.editorial`, :attr:`~music21.note.GeneralNote.isChord`, :attr:`~music21.note.GeneralNote.lyrics`, :attr:`~music21.note.GeneralNote.notations`, :attr:`~music21.note.GeneralNote.tie`, :attr:`~music21.note.GeneralNote.articulations`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **Rest** **properties**

        .. attribute:: lily

            The name of the rest as it would appear in Lilypond format. 

            >>> from music21 import *
            >>> r1 = note.Rest()
            >>> r1.duration.type = "half"
            >>> r1.lily
            'r2' 

        .. attribute:: mx

            Returns a List of mxNotes Attributes of notes are merged from different locations: first from the duration objects, then from the pitch objects. Finally, GeneralNote attributes are added 

        Properties inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.quarterLength`, :attr:`~music21.note.GeneralNote.beat`, :attr:`~music21.note.GeneralNote.beatDuration`, :attr:`~music21.note.GeneralNote.beatStr`, :attr:`~music21.note.GeneralNote.color`, :attr:`~music21.note.GeneralNote.lyric`, :attr:`~music21.note.GeneralNote.musicxml`

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.duration`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **Rest** **methods**

        Methods inherited from :class:`~music21.note.GeneralNote`: :meth:`~music21.note.GeneralNote.addLyric`, :meth:`~music21.note.GeneralNote.augmentOrDiminish`, :meth:`~music21.note.GeneralNote.compactNoteInfo`, :meth:`~music21.note.GeneralNote.splitAtDurations`, :meth:`~music21.note.GeneralNote.splitByQuarterLengths`

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.isClass`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


EighthNote
----------

.. class:: EighthNote(*arguments, **keywords)


    inherits from: :class:`~music21.note.Note`, :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`


GeneralNote
-----------

.. class:: GeneralNote(*arguments, **keywords)

    A GeneralNote object is the parent object for the :class:`music21.note.Note`, :class:`music21.note.Rest`, :class:`music21.note.Chord`, and related objects. 

    inherits from: :class:`~music21.base.Music21Object`

    **GeneralNote** **attributes**

        .. attribute:: editorial

            EditorialComments that can be applied to notes 

            >>> a = NoteEditorial()
            >>> a.misc
            {} 

        .. attribute:: isChord

            Boolean read-only value describing if this object is a Chord. 

        .. attribute:: lyrics

            A list of Lyric objects. 

        .. attribute:: tie

            A Tie object. 

        Attributes without Documentation: `notations`, `articulations`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **GeneralNote** **properties**

        .. attribute:: quarterLength

            Return the Duration as represented in Quarter Length. 

            >>> from music21 import *
            >>> n = note.Note()
            >>> n.quarterLength = 2.0
            >>> n.quarterLength
            2.0 

        .. attribute:: beat

            Return the beat of this Note as found in the most recently positioned Measure. Beat values count from 1 and contain a floating-point designation between 0 and 1 to show proportional progress through the beat. 

            >>> from music21 import *
            >>> n = note.Note()
            >>> n.quarterLength = .5
            >>> m = stream.Measure()
            >>> m.timeSignature = meter.TimeSignature('3/4')
            >>> m.repeatAppend(n, 6)
            >>> [m.notes[i].beat for i in range(6)]
            [1.0, 1.5, 2.0, 2.5, 3.0, 3.5] 
            >>> m.timeSignature = meter.TimeSignature('6/8')
            >>> [m.notes[i].beat for i in range(6)]
            [1.0, 1.3333333..., 1.666666666..., 2.0, 2.33333333..., 2.66666...] 

            

        .. attribute:: beatDuration

            Return a :class:`~music21.duration.Duration` of the beat active for this Note as found in the most recently positioned Measure. 

            >>> from music21 import *
            >>> n = note.Note()
            >>> n.quarterLength = .5
            >>> m = stream.Measure()
            >>> m.timeSignature = meter.TimeSignature('3/4')
            >>> m.repeatAppend(n, 6)
            >>> [m.notes[i].beatDuration.quarterLength for i in range(6)]
            [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] 
            >>> m.timeSignature = meter.TimeSignature('6/8')
            >>> [m.notes[i].beatDuration.quarterLength for i in range(6)]
            [1.5, 1.5, 1.5, 1.5, 1.5, 1.5] 

        .. attribute:: beatStr

            Return a string representation of the beat of this Note as found in the most recently positioned Measure. Beat values count from 1 and contain a fractional designation to show progress through the beat. 

            >>> from music21 import *
            >>> n = note.Note()
            >>> n.quarterLength = .5
            >>> m = stream.Measure()
            >>> m.timeSignature = meter.TimeSignature('3/4')
            >>> m.repeatAppend(n, 6)
            >>> [m.notes[i].beatStr for i in range(6)]
            ['1', '1 1/2', '2', '2 1/2', '3', '3 1/2'] 
            >>> m.timeSignature = meter.TimeSignature('6/8')
            >>> [m.notes[i].beatStr for i in range(6)]
            ['1', '1 1/3', '1 2/3', '2', '2 1/3', '2 2/3'] 

        .. attribute:: color

            No documentation. 

        .. attribute:: lyric

            The lyric property can be used to get and set a lyric for this Note, Chord, or Rest. In most cases the :meth:`~music21.note.GeneralNote.addLyric` method should be used. 

        .. attribute:: musicxml

            This must call _getMX to get basic mxNote objects 

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.duration`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **GeneralNote** **methods**

        .. method:: addLyric(text, lyricNumber=None)

            Adds a lyric, or an additional lyric, to a Note, Chord, or Rest's lyric list. If `lyricNumber` is not None, a specific line of lyric text can be set. 

            >>> from music21 import *
            >>> n1 = note.Note()
            >>> n1.addLyric("hello")
            >>> n1.lyrics[0].text
            'hello' 
            >>> n1.lyrics[0].number
            1 
            >>> # note that the option number specified gives the lyric number, not the list position
            >>> n1.addLyric("bye", 3)
            >>> n1.lyrics[1].text
            'bye' 
            >>> n1.lyrics[1].number
            3 
            >>> # replace existing lyric
            >>> n1.addLyric("ciao", 3)
            >>> n1.lyrics[1].text
            'ciao' 
            >>> n1.lyrics[1].number
            3 

        .. method:: augmentOrDiminish(scalar, inPlace=True)

            Given a scalar greater than zero, return a Note with a scaled Duration. If `inPlace` is True, this is done in-place and the method returns None. If `inPlace` is False, this returns a modified deep copy. 

            >>> from music21 import *
            >>> n = note.Note('g#')
            >>> n.quarterLength = 3
            >>> n.augmentOrDiminish(2)
            >>> n.quarterLength
            6 
            >>> from music21 import chord
            >>> c = chord.Chord(['g#','A#','d'])
            >>> n.quarterLength = 2
            >>> n.augmentOrDiminish(.25)
            >>> n.quarterLength
            0.5 

        .. method:: compactNoteInfo()

            A debugging info tool, returning information about a note E- E 4 flat 16th 0.166666666667 & is a tuplet (in fact STOPS the tuplet) 

        .. method:: splitAtDurations()

            Takes a Note and returns a list of Notes with only a single duration.DurationUnit in each. Ties are added. 

            >>> from music21 import *
            >>> a = note.Note()
            >>> a.duration.clear() # remove defaults
            >>> a.duration.addDurationUnit(duration.Duration('half'))
            >>> a.duration.quarterLength
            2.0 
            >>> a.duration.addDurationUnit(duration.Duration('whole'))
            >>> a.duration.quarterLength
            6.0 
            >>> b = a.splitAtDurations()
            >>> b[0].pitch == b[1].pitch
            True 
            >>> b[0].duration.type
            'half' 
            >>> b[1].duration.type
            'whole' 

        .. method:: splitByQuarterLengths(quarterLengthList)

            Given a list of quarter lengths, return a list of Note objects, copied from this Note, that are partitioned and tied with the specified quarter length list durations. 

            >>> n = Note()
            >>> n.quarterLength = 3
            >>> post = n.splitByQuarterLengths([1,1,1])
            >>> [n.quarterLength for n in post]
            [1, 1, 1] 

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.isClass`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


HalfNote
--------

.. class:: HalfNote(*arguments, **keywords)


    inherits from: :class:`~music21.note.Note`, :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`


Lyric
-----

.. class:: Lyric(text=None, number=1, syllabic=None)


    

    **Lyric** **attributes**

        Attributes without Documentation: `text`, `number`, `syllabic`

    **Lyric** **properties**

        .. attribute:: mx

            Returns an mxLyric 

            >>> from music21 import *
            >>> a = note.Lyric()
            >>> a.text = 'hello'
            >>> mxLyric = a.mx
            >>> mxLyric.get('text')
            'hello' 


NotRest
-------

.. class:: NotRest(*arguments, **keywords)

    Parent class for objects that are not rests; or, object that can be tied. 

    inherits from: :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`

    **NotRest** **attributes**

        Attributes without Documentation: `stemDirection`

        Attributes inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.editorial`, :attr:`~music21.note.GeneralNote.isChord`, :attr:`~music21.note.GeneralNote.lyrics`, :attr:`~music21.note.GeneralNote.notations`, :attr:`~music21.note.GeneralNote.tie`, :attr:`~music21.note.GeneralNote.articulations`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **NotRest** **properties**

        Properties inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.quarterLength`, :attr:`~music21.note.GeneralNote.beat`, :attr:`~music21.note.GeneralNote.beatDuration`, :attr:`~music21.note.GeneralNote.beatStr`, :attr:`~music21.note.GeneralNote.color`, :attr:`~music21.note.GeneralNote.lyric`, :attr:`~music21.note.GeneralNote.musicxml`

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.duration`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **NotRest** **methods**

        .. method:: splitNoteAtPoint(quarterLength)

            Split a Note into two Notes. 

            >>> from music21 import *
            >>> a = note.NotRest()
            >>> a.duration.type = 'whole'
            >>> b, c = a.splitNoteAtPoint(3)
            >>> b.duration.type
            'half' 
            >>> b.duration.dots
            1 
            >>> b.duration.quarterLength
            3.0 
            >>> c.duration.type
            'quarter' 
            >>> c.duration.dots
            0 
            >>> c.duration.quarterLength
            1.0 

        Methods inherited from :class:`~music21.note.GeneralNote`: :meth:`~music21.note.GeneralNote.addLyric`, :meth:`~music21.note.GeneralNote.augmentOrDiminish`, :meth:`~music21.note.GeneralNote.compactNoteInfo`, :meth:`~music21.note.GeneralNote.splitAtDurations`, :meth:`~music21.note.GeneralNote.splitByQuarterLengths`

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.isClass`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


QuarterNote
-----------

.. class:: QuarterNote(*arguments, **keywords)


    inherits from: :class:`~music21.note.Note`, :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`


Tie
---

.. class:: Tie(tievalue=start)

    Object added to notes that are tied to other notes. The `type` value is generally one of start or stop. 

    >>> from music21 import *
    >>> note1 = note.Note()
    >>> note1.tie = Tie("start")
    >>> note1.tieStyle = "normal" # or could be dotted or dashed
    >>> note1.tie.type
    'start' 
    Differences from MusicXML: 
    notes do not need to know if they are tied from a 
    previous note.  i.e., you can tie n1 to n2 just with 
    a tie start on n1.  However, if you want proper musicXML output 
    you need a tie stop on n2 
    one tie with "continue" implies tied from and tied to 
    optional (to know what notes are next:) 
    .to = note()   # not implimented yet, b/c of garbage coll. 
    .from = note() 

    inherits from: :class:`~music21.base.Music21Object`

    **Tie** **attributes**

        Attributes without Documentation: `type`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **Tie** **properties**

        .. attribute:: mx

            No documentation. 

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.duration`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **Tie** **methods**

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.isClass`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


Unpitched
---------

.. class:: Unpitched(*arguments, **keywords)

    General class of unpitched objects which appear at different places on the staff.  Examples: percussion notation 

    inherits from: :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`

    **Unpitched** **attributes**

        .. attribute:: isNote

            Boolean read-only value describing if this object is a Chord. Is False 

        .. attribute:: isRest

            Boolean read-only value describing if this is a Rest. Is False 

        Attributes without Documentation: `displayOctave`, `displayStep`, `isUnpitched`

        Attributes inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.editorial`, :attr:`~music21.note.GeneralNote.isChord`, :attr:`~music21.note.GeneralNote.lyrics`, :attr:`~music21.note.GeneralNote.notations`, :attr:`~music21.note.GeneralNote.tie`, :attr:`~music21.note.GeneralNote.articulations`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **Unpitched** **properties**

        Properties inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.quarterLength`, :attr:`~music21.note.GeneralNote.beat`, :attr:`~music21.note.GeneralNote.beatDuration`, :attr:`~music21.note.GeneralNote.beatStr`, :attr:`~music21.note.GeneralNote.color`, :attr:`~music21.note.GeneralNote.lyric`, :attr:`~music21.note.GeneralNote.musicxml`

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.duration`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **Unpitched** **methods**

        Methods inherited from :class:`~music21.note.GeneralNote`: :meth:`~music21.note.GeneralNote.addLyric`, :meth:`~music21.note.GeneralNote.augmentOrDiminish`, :meth:`~music21.note.GeneralNote.compactNoteInfo`, :meth:`~music21.note.GeneralNote.splitAtDurations`, :meth:`~music21.note.GeneralNote.splitByQuarterLengths`

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.isClass`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


WholeNote
---------

.. class:: WholeNote(*arguments, **keywords)


    inherits from: :class:`~music21.note.Note`, :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`


