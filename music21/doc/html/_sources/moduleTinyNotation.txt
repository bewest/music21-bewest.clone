.. _moduleTinyNotation:

music21.tinyNotation
====================

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED

.. module:: music21.tinyNotation

tinyNotation -- a simple way of specifying single line melodies that uses a notation somewhat similar to Lilypond but with WAY fewer examples.  Originally developed to notate trecento (medieval Italian) music, but it's pretty useful for a lot of short examples. tinyNotation is not meant to expand to cover every single case.  Instead it is meant to be subclassable to extend to the cases *your* project needs. See for instance the harmony examples in HarmonyNotationLine and HarmonyNotationNote or the Trecento specific examples in trecento/cadencebook.py 


TinyNotationNote
----------------

.. class:: TinyNotationNote

    

    >>> tcN = TinyNotationNote("AA-4.~=aflat_hel-")
    >>> note1 = tcN.note
    >>> note1.name
    'A-' 
    >>> note1.octave
    2 
    >>> note1.lyric
    'hel-' 
    >>> note1.id
    'aflat' 

    

    **TinyNotationNote** **attributes**

    .. attribute:: DBLDOT

    Compiled regular expression objects 

    .. attribute:: DOT

    Compiled regular expression objects 

    .. attribute:: EDFLAT

    Compiled regular expression objects 

    .. attribute:: EDNAT

    Compiled regular expression objects 

    .. attribute:: EDSHARP

    Compiled regular expression objects 

    .. attribute:: FLAT

    Compiled regular expression objects 

    .. attribute:: ID_EL

    Compiled regular expression objects 

    .. attribute:: LYRIC

    Compiled regular expression objects 

    .. attribute:: OCTAVE2

    Compiled regular expression objects 

    .. attribute:: OCTAVE3

    Compiled regular expression objects 

    .. attribute:: OCTAVE4

    Compiled regular expression objects 

    .. attribute:: OCTAVE5

    Compiled regular expression objects 

    .. attribute:: PRECTIE

    Compiled regular expression objects 

    .. attribute:: REST

    Compiled regular expression objects 

    .. attribute:: SHARP

    Compiled regular expression objects 

    .. attribute:: TIE

    Compiled regular expression objects 

    .. attribute:: TYPE

    Compiled regular expression objects 

    **TinyNotationNote** **methods**

    .. method:: __init__(stringRep, storedDict={})

    No documentation. 

    .. method:: customNotationMatch(m21NoteObject, stringRep, storedDict)

    No documentation. 

    .. method:: customPitchMatch(stringRep, storedDict)

    method to create a note object in sub classes of tiny notation. Should return a Note-like object or None 

    .. method:: getDots(stringRep, noteObj)

    subclassable method to set the dots attributes of the duration object. It is subclassed in music21.trecento.cadencebook.TrecentoNote where double dots are redefined as referring to multiply by 2.25 (according to a practice used by some Medieval musicologists). 


TinyNotationStream
------------------

.. class:: TinyNotationStream

    A TinyNotationStream takes in a string representation similar to Lilypond format but simplified somewhat and an optional time signature string (or TimeSignature object). example in 3/4: 

    >>> stream1 = TinyNotationStream("E4 r f# g=lastG trip{b-8 a g} c", "3/4")
    >>> stream1.getElementById("lastG").step
    'G' 
    >>> stream1.notes[1].isRest
    True 
    >>> stream1.notes[0].octave
    3 

    inherits from: :class:`~music21.stream.Stream`, :class:`~music21.base.Music21Object`

    **TinyNotationStream** **attributes**

    .. attribute:: ENDBRAC

    Compiled regular expression objects 

    .. attribute:: QUAD

    Compiled regular expression objects 

    .. attribute:: TRIP

    Compiled regular expression objects 

    .. attribute:: stringRep

    No documentation. 

    Attributes inherited from :class:`~music21.stream.Stream`: :attr:`~music21.stream.Stream.flattenedRepresentationOf`, :attr:`~music21.stream.Stream.isFlat`, :attr:`~music21.stream.Stream.isSorted`

    Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **TinyNotationStream** **properties**

    Properties inherited from :class:`~music21.stream.Stream`: :attr:`~music21.stream.Stream.measures`, :attr:`~music21.stream.Stream.notes`, :attr:`~music21.stream.Stream.pitches`, :attr:`~music21.stream.Stream.duration`, :attr:`~music21.stream.Stream.elements`, :attr:`~music21.stream.Stream.flat`, :attr:`~music21.stream.Stream.highestOffset`, :attr:`~music21.stream.Stream.highestTime`, :attr:`~music21.stream.Stream.isGapless`, :attr:`~music21.stream.Stream.lily`, :attr:`~music21.stream.Stream.lowestOffset`, :attr:`~music21.stream.Stream.musicxml`, :attr:`~music21.stream.Stream.mx`, :attr:`~music21.stream.Stream.semiFlat`, :attr:`~music21.stream.Stream.sorted`

    Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **TinyNotationStream** **methods**

    .. method:: __init__(stringRep=, timeSignature=None)

    No documentation. 

    .. method:: getNote(stringRep, storedDict={})

    called out so as to be subclassable 

    Methods inherited from :class:`~music21.stream.Stream`: :meth:`~music21.stream.Stream.append`, :meth:`~music21.stream.Stream.insert`, :meth:`~music21.stream.Stream.addGroupForElements`, :meth:`~music21.stream.Stream.allPlayingWhileSounding`, :meth:`~music21.stream.Stream.attachIntervalsBetweenStreams`, :meth:`~music21.stream.Stream.attributeCount`, :meth:`~music21.stream.Stream.bestClef`, :meth:`~music21.stream.Stream.extendDuration`, :meth:`~music21.stream.Stream.extractContext`, :meth:`~music21.stream.Stream.findConsecutiveNotes`, :meth:`~music21.stream.Stream.findGaps`, :meth:`~music21.stream.Stream.getElementAfterElement`, :meth:`~music21.stream.Stream.getElementAfterOffset`, :meth:`~music21.stream.Stream.getElementAtOrAfter`, :meth:`~music21.stream.Stream.getElementAtOrBefore`, :meth:`~music21.stream.Stream.getElementBeforeElement`, :meth:`~music21.stream.Stream.getElementBeforeOffset`, :meth:`~music21.stream.Stream.getElementById`, :meth:`~music21.stream.Stream.getElementsByClass`, :meth:`~music21.stream.Stream.getElementsByGroup`, :meth:`~music21.stream.Stream.getElementsByOffset`, :meth:`~music21.stream.Stream.getGroups`, :meth:`~music21.stream.Stream.getInstrument`, :meth:`~music21.stream.Stream.getMeasureRange`, :meth:`~music21.stream.Stream.getMeasures`, :meth:`~music21.stream.Stream.getNotes`, :meth:`~music21.stream.Stream.getOffsetByElement`, :meth:`~music21.stream.Stream.getOverlaps`, :meth:`~music21.stream.Stream.getPitches`, :meth:`~music21.stream.Stream.getSimultaneous`, :meth:`~music21.stream.Stream.getTimeSignatures`, :meth:`~music21.stream.Stream.groupElementsByOffset`, :meth:`~music21.stream.Stream.index`, :meth:`~music21.stream.Stream.insertAtIndex`, :meth:`~music21.stream.Stream.insertAtNativeOffset`, :meth:`~music21.stream.Stream.isClass`, :meth:`~music21.stream.Stream.isSequence`, :meth:`~music21.stream.Stream.makeAccidentals`, :meth:`~music21.stream.Stream.makeBeams`, :meth:`~music21.stream.Stream.makeMeasures`, :meth:`~music21.stream.Stream.makeRests`, :meth:`~music21.stream.Stream.makeTies`, :meth:`~music21.stream.Stream.measureOffsetMap`, :meth:`~music21.stream.Stream.melodicIntervals`, :meth:`~music21.stream.Stream.pitchAttributeCount`, :meth:`~music21.stream.Stream.playingWhenAttacked`, :meth:`~music21.stream.Stream.plot`, :meth:`~music21.stream.Stream.pop`, :meth:`~music21.stream.Stream.repeatAppend`, :meth:`~music21.stream.Stream.repeatInsert`, :meth:`~music21.stream.Stream.setupPickleScaffold`, :meth:`~music21.stream.Stream.shiftElements`, :meth:`~music21.stream.Stream.simultaneousAttacks`, :meth:`~music21.stream.Stream.splitByClass`, :meth:`~music21.stream.Stream.stripTies`, :meth:`~music21.stream.Stream.teardownPickleScaffold`, :meth:`~music21.stream.Stream.transferOffsetToElements`, :meth:`~music21.stream.Stream.transpose`, :meth:`~music21.stream.Stream.trimPlayingWhileSounding`

    Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


HarmonyStream
-------------

.. class:: HarmonyStream

    example of subclassing TinyNotationStream to include a possible harmonic representation of the note 

    >>> michelle = "c2*F*_Mi- c_chelle r4*B-m7* d-_ma A-2_belle "
    >>> michelle += "G4*E-*_these c_are A-_words G_that "
    >>> michelle += "F*Ddim*_go A-_to- Bn_geth- A-_er"
    >>> hns = HarmonyStream(michelle, "4/4")
    >>> ns = hns.notes
    >>> ns[0].step
    'C' 
    >>> ns[0].editorial.misc['harmony']
    'F' 
    >>> ns[0].lyric
    'Mi-' 
    >>> ns[2].isRest
    True 
    >>> ns[5].name
    'G' 
    >>> ns[7].name
    'A-' 

    

    inherits from: :class:`~music21.tinyNotation.TinyNotationStream`, :class:`~music21.stream.Stream`, :class:`~music21.base.Music21Object`

    **HarmonyStream** **attributes**

    Attributes inherited from :class:`~music21.tinyNotation.TinyNotationStream`: :attr:`~music21.tinyNotation.TinyNotationStream.ENDBRAC`, :attr:`~music21.tinyNotation.TinyNotationStream.QUAD`, :attr:`~music21.tinyNotation.TinyNotationStream.TRIP`, :attr:`~music21.tinyNotation.TinyNotationStream.stringRep`

    Attributes inherited from :class:`~music21.stream.Stream`: :attr:`~music21.stream.Stream.flattenedRepresentationOf`, :attr:`~music21.stream.Stream.isFlat`, :attr:`~music21.stream.Stream.isSorted`

    Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`

    **HarmonyStream** **properties**

    Properties inherited from :class:`~music21.stream.Stream`: :attr:`~music21.stream.Stream.measures`, :attr:`~music21.stream.Stream.notes`, :attr:`~music21.stream.Stream.pitches`, :attr:`~music21.stream.Stream.duration`, :attr:`~music21.stream.Stream.elements`, :attr:`~music21.stream.Stream.flat`, :attr:`~music21.stream.Stream.highestOffset`, :attr:`~music21.stream.Stream.highestTime`, :attr:`~music21.stream.Stream.isGapless`, :attr:`~music21.stream.Stream.lily`, :attr:`~music21.stream.Stream.lowestOffset`, :attr:`~music21.stream.Stream.musicxml`, :attr:`~music21.stream.Stream.mx`, :attr:`~music21.stream.Stream.semiFlat`, :attr:`~music21.stream.Stream.sorted`

    Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.parent`, :attr:`~music21.base.Music21Object.priority`

    **HarmonyStream** **methods**

    .. method:: getNote(stringRep, storedDict={})

    No documentation. 

    Methods inherited from :class:`~music21.tinyNotation.TinyNotationStream`: :meth:`~music21.tinyNotation.TinyNotationStream.__init__`

    Methods inherited from :class:`~music21.stream.Stream`: :meth:`~music21.stream.Stream.append`, :meth:`~music21.stream.Stream.insert`, :meth:`~music21.stream.Stream.addGroupForElements`, :meth:`~music21.stream.Stream.allPlayingWhileSounding`, :meth:`~music21.stream.Stream.attachIntervalsBetweenStreams`, :meth:`~music21.stream.Stream.attributeCount`, :meth:`~music21.stream.Stream.bestClef`, :meth:`~music21.stream.Stream.extendDuration`, :meth:`~music21.stream.Stream.extractContext`, :meth:`~music21.stream.Stream.findConsecutiveNotes`, :meth:`~music21.stream.Stream.findGaps`, :meth:`~music21.stream.Stream.getElementAfterElement`, :meth:`~music21.stream.Stream.getElementAfterOffset`, :meth:`~music21.stream.Stream.getElementAtOrAfter`, :meth:`~music21.stream.Stream.getElementAtOrBefore`, :meth:`~music21.stream.Stream.getElementBeforeElement`, :meth:`~music21.stream.Stream.getElementBeforeOffset`, :meth:`~music21.stream.Stream.getElementById`, :meth:`~music21.stream.Stream.getElementsByClass`, :meth:`~music21.stream.Stream.getElementsByGroup`, :meth:`~music21.stream.Stream.getElementsByOffset`, :meth:`~music21.stream.Stream.getGroups`, :meth:`~music21.stream.Stream.getInstrument`, :meth:`~music21.stream.Stream.getMeasureRange`, :meth:`~music21.stream.Stream.getMeasures`, :meth:`~music21.stream.Stream.getNotes`, :meth:`~music21.stream.Stream.getOffsetByElement`, :meth:`~music21.stream.Stream.getOverlaps`, :meth:`~music21.stream.Stream.getPitches`, :meth:`~music21.stream.Stream.getSimultaneous`, :meth:`~music21.stream.Stream.getTimeSignatures`, :meth:`~music21.stream.Stream.groupElementsByOffset`, :meth:`~music21.stream.Stream.index`, :meth:`~music21.stream.Stream.insertAtIndex`, :meth:`~music21.stream.Stream.insertAtNativeOffset`, :meth:`~music21.stream.Stream.isClass`, :meth:`~music21.stream.Stream.isSequence`, :meth:`~music21.stream.Stream.makeAccidentals`, :meth:`~music21.stream.Stream.makeBeams`, :meth:`~music21.stream.Stream.makeMeasures`, :meth:`~music21.stream.Stream.makeRests`, :meth:`~music21.stream.Stream.makeTies`, :meth:`~music21.stream.Stream.measureOffsetMap`, :meth:`~music21.stream.Stream.melodicIntervals`, :meth:`~music21.stream.Stream.pitchAttributeCount`, :meth:`~music21.stream.Stream.playingWhenAttacked`, :meth:`~music21.stream.Stream.plot`, :meth:`~music21.stream.Stream.pop`, :meth:`~music21.stream.Stream.repeatAppend`, :meth:`~music21.stream.Stream.repeatInsert`, :meth:`~music21.stream.Stream.setupPickleScaffold`, :meth:`~music21.stream.Stream.shiftElements`, :meth:`~music21.stream.Stream.simultaneousAttacks`, :meth:`~music21.stream.Stream.splitByClass`, :meth:`~music21.stream.Stream.stripTies`, :meth:`~music21.stream.Stream.teardownPickleScaffold`, :meth:`~music21.stream.Stream.transferOffsetToElements`, :meth:`~music21.stream.Stream.transpose`, :meth:`~music21.stream.Stream.trimPlayingWhileSounding`

    Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocationAndParent`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.searchParentByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`


HarmonyNote
-----------

.. class:: HarmonyNote


    inherits from: :class:`~music21.tinyNotation.TinyNotationNote`

    **HarmonyNote** **attributes**

    .. attribute:: HARMONY

    Compiled regular expression objects 

    Attributes inherited from :class:`~music21.tinyNotation.TinyNotationNote`: :attr:`~music21.tinyNotation.TinyNotationNote.DBLDOT`, :attr:`~music21.tinyNotation.TinyNotationNote.DOT`, :attr:`~music21.tinyNotation.TinyNotationNote.EDFLAT`, :attr:`~music21.tinyNotation.TinyNotationNote.EDNAT`, :attr:`~music21.tinyNotation.TinyNotationNote.EDSHARP`, :attr:`~music21.tinyNotation.TinyNotationNote.FLAT`, :attr:`~music21.tinyNotation.TinyNotationNote.ID_EL`, :attr:`~music21.tinyNotation.TinyNotationNote.LYRIC`, :attr:`~music21.tinyNotation.TinyNotationNote.OCTAVE2`, :attr:`~music21.tinyNotation.TinyNotationNote.OCTAVE3`, :attr:`~music21.tinyNotation.TinyNotationNote.OCTAVE4`, :attr:`~music21.tinyNotation.TinyNotationNote.OCTAVE5`, :attr:`~music21.tinyNotation.TinyNotationNote.PRECTIE`, :attr:`~music21.tinyNotation.TinyNotationNote.REST`, :attr:`~music21.tinyNotation.TinyNotationNote.SHARP`, :attr:`~music21.tinyNotation.TinyNotationNote.TIE`, :attr:`~music21.tinyNotation.TinyNotationNote.TYPE`

    **HarmonyNote** **methods**

    .. method:: customNotationMatch(m21NoteObject, stringRep, storedDict)

    checks to see if a note has markup in the form *TEXT* and if so, stores TEXT in the notes editorial.misc[] dictionary object See the demonstration in the docs for class HarmonyLine. 

    Methods inherited from :class:`~music21.tinyNotation.TinyNotationNote`: :meth:`~music21.tinyNotation.TinyNotationNote.__init__`, :meth:`~music21.tinyNotation.TinyNotationNote.customPitchMatch`, :meth:`~music21.tinyNotation.TinyNotationNote.getDots`


